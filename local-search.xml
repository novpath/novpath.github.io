<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用Github Actions自动部署Hexo小白教程</title>
    <link href="/2021/01/31/%E4%BD%BF%E7%94%A8Github-Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/"/>
    <url>/2021/01/31/%E4%BD%BF%E7%94%A8Github-Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使用Github page + Hexo可以很方便的搭建博客，写博客。一般将hexo源文件存储在一个仓库的一个分支，而hexo产生的静态页面放在另一个分支，例如master分支，在Github page上选择以master分支为源展示页面。不过这产生了一个问题，一个完整的流程是<a id="more"></a>先<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>部署到github仓库的master分支，再将hexo源文件使用如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git add .<br>git commit -m &quot;备注信息……&quot;<br>git push origin fluid(源文件所在分支名，我这里是fluid分支)<br></code></pre></div></td></tr></table></figure><p>推送到仓库，这就显得过程比较繁琐复杂。<code>Github actions</code>提供了一种方便的方法，我们仅仅需要执行上述第二步，将源文件推送到Github Page的fluid分支上，当Github Actions 识别到我们有推送行为，就会将源文件自动部署到master分支上，减少了一半的工作量，让我们更专注于博客写作而不是调试博客系统。下面叙述一下Github Actions实现这一功能的配置步骤。</p><h2 id="获取访问秘钥"><a href="#获取访问秘钥" class="headerlink" title="获取访问秘钥"></a>获取访问秘钥</h2><p>如果之前能正常使用<code>hexo d</code>推送，这步应该已经完成，可以视情况跳过。</p><p>在本地库的hexo文件夹下使用git bash打开命令窗口，输入</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git config --global user.name &quot;你的github名字&quot;<br>git config --global user.email &quot;你的github邮箱&quot;<br></code></pre></div></td></tr></table></figure><p>之后输入指令生成SSH的公钥和私钥</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">ssh-keygen -t rsa -C &quot;你的github邮箱&quot;<br></code></pre></div></td></tr></table></figure><p>输入以下代码后一直按回车确认，直到代码执行完毕，在<code>/c/Users/你当前的windows用户名/.ssh文件夹</code>可以找到生成的公钥和私钥(有时Win系统Users文件夹会显示为中文的“用户”)，然后里面的两个文件分别为<code>id_rsa(私钥) 和 id_rsa.pub(公钥)</code>，同时在本地库的<code>.gitignore</code>文件中把公钥和私钥的<strong>文件名</strong>加进去，防止误操作将秘钥泄露到github远程库。</p><p>打开github，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随意，将<strong>公钥文件</strong>内所有内容粘贴到框内。在git bash中输入<code>ssh -T git@github.com</code>，下面出现你的用户名说明已经核验成功。(p.s.：SSH keys是最高权限的用户公钥，仅仅管理Github的Hexo仓库的话，<code>Setting -&gt; Deploy keys</code>单独设置deploy keys也可以达到同样的效果。)然后在Hexo文件所在Github仓库中<code>Settings -&gt; Secrets -&gt; Add a new secret</code>页面上创建一个新的<strong>私钥文件</strong>，名字随意但是要记下来，等下配置actions时有用，默认<code>Name</code>为<code>ACTIONS_DEPLOY_KEY</code>，将<code>id_rsa(私钥)</code>文件中的所有内容粘贴进去。</p><h2 id="配置Github-Actions"><a href="#配置Github-Actions" class="headerlink" title="配置Github Actions"></a>配置Github Actions</h2><h3 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h3><p>在本地库中新建文件，目录结构为<code>.github/workflows/CI.yml</code>,总共三个文件。</p><h3 id="配置CI的YAML文件"><a href="#配置CI的YAML文件" class="headerlink" title="配置CI的YAML文件"></a>配置CI的YAML文件</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">fluid</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">查询分支</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;10.x&#x27;</span><br>    <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装Hexo依赖</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-string">-g</span><br>          <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">清除Hexo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">heowc/action-hexo@main</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">args:</span> <span class="hljs-string">clean</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">生成Hexo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">heowc/action-hexo@main</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">args:</span> <span class="hljs-string">generate</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">部署到master分支</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">deploy_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">external_repository:</span> <span class="hljs-string">你的github名称/你的github名称.github.io</span><br>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">master</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br></code></pre></div></td></tr></table></figure><h3 id="相关参数简述"><a href="#相关参数简述" class="headerlink" title="相关参数简述"></a>相关参数简述</h3><p>CI会在fluid分支中出现push时执行以下jobs。</p><p>环境运行在Ubuntu最新版本系统下，<code>actions/checkout@v2</code>组件会查询所在库的下拉菜单，识别到各个分支名称。</p><p>然后安装版本10.x的node.js，并安装hexo的依赖以及必备组件，这样github服务器上的完整运行环境就搭建起来了。</p><p>最后一步就是服务器代为我们完成<code>clean</code>，<code>generate</code>等操作，最后使用<code>peaceiris/actions-gh-pages@v3</code>组件帮我们<code>deploy</code>到<code>master</code>分支。当然，这个组件还有两种其他配置方法，可以在github上查询到更详细更灵活的用法。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>本地库配置完毕后，就在hexo文件夹的根目录下的git bash中执行</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git add .<br>git commit -m &quot;备注信息……&quot;<br>git push origin fluid(源文件所在分支名，我这里是fluid分支)<br></code></pre></div></td></tr></table></figure><p>同步至github远程库中，github会自动识别<code>.github/workflows/CI.yml</code>里的YAML配置文件，然后建立Actions。正常情况下博客源文件push后，几分钟Actions建立(Build)完毕后，就会看到Github服务器将源文件部署到master分支上了。之后写博客也仅仅需要执行上述三行代码就能将<code>Hexo源文件</code>和<code>Hexo生成的静态页面</code>同时部署到github上了。</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>Hexo</tag>
      
      <tag>CI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/31/hello-world/"/>
    <url>/2021/01/31/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid一些不常用功能简单使用</title>
    <link href="/2021/01/26/Hexo-Fluid%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/01/26/Hexo-Fluid%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Hexo-Fluid本身集成了一些有趣的功能，但是使用比较少，本文旨在简述这些功能的简单用法，也避免之后遗忘等问题。</p><a id="more"></a><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>​    Fluid主题内置了脚注语法，有时方便引用的一些写法，脚注一般写在文末更规范美观。</p><p>栗子：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">脚注，是可以附在文章页面的最底端的，对文本加以补充说明的注文[^1]。<br>[<span class="hljs-symbol">^1</span>]:<span class="hljs-link">参考资料-百度百科</span><br></code></pre></div></td></tr></table></figure><p>效果：</p><p>​    脚注，是可以附在文章页面的最底端的，对文本加以补充说明的注文<sup><a href="#fn_1" id="reffn_1">1</a></sup>。(尾注自动生成至文末)</p><h2 id="Tag标签"><a href="#Tag标签" class="headerlink" title="Tag标签"></a>Tag标签</h2><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><p>​        两种方式使用Tag插件，在markdown中使用如下代码</p><p>栗子一：使用markdown特殊代码段，注意两个特殊代码需要单独成一行</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></div></td></tr></table></figure><p>栗子二：使用HTML形式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>示栗：</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><p>栗子一：使用markdown语法，加标签那段话不能以@开头</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">这段话第十个字之后要&#123;% label primary @加标签 %&#125;啦！<br></code></pre></div></td></tr></table></figure><p>这段话第十个字之后要<span class="label label-primary">加标签</span>啦！     ←效果</p><p>栗子二：使用HTML形式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">这段话第十个字之后要<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-warning&quot;</span>&gt;</span>加标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>啦！<br></code></pre></div></td></tr></table></figure><p>这段话第十个字之后要<span class="label label-warning">加标签</span>啦！   ←效果</p><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><p>在markdown后面加上下述代码使用Checkbox</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></div></td></tr></table></figure><p>text：显示的文字</p><p>checked：默认是否勾选，默认false</p><p>incline：是否内联(内联元素不会独占一行)，默认false</p><p>示栗：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% cb 普通示例 %&#125;<br><br>&#123;% cb 默认选中, true %&#125;<br><br>&#123;% cb 内联示例, false, true %&#125; 后面文字不换行<br><br>&#123;% cb false %&#125; 也可以只传入一个参数，文字写在后边（这样不支持外联)<br></code></pre></div></td></tr></table></figure><div>            <input type="checkbox" disabled >普通示例          </div><div>            <input type="checkbox" disabled checked="checked">默认选中          </div><div><span>            <input type="checkbox" disabled >内联示例          </span><span><input type="checkbox" disabled >也可以只传入一个参数，文字写在后边（这样不支持外联) </span></div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>可以在markdown中加入如下代码来使用Button：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br></code></pre></div></td></tr></table></figure><p>也可以使用HTML形式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>url：跳转链接</p><p>text：显示文字</p><p>title：鼠标悬停于button时显示的文字</p><a class="btn" href="https://github.com/novpath"  title="点击进入我的github主页" target="_blank">我是按钮</a>   <h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><p>该功能以实现多张图片按一定布局组合显示。</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>&#123;% endgi %&#125;<br></code></pre></div></td></tr></table></figure><p>total：图片总数量，对应中间包含的图片 url 数量<br>n1-n2-…：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</p><p>效果：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/avatar.png" alt="图片1"></div><div class="group-image-wrap"><img src="/img/avatar.png" alt="图片2"></div><div class="group-image-wrap"><img src="/img/avatar.png" alt="图片3"></div></div></div><h2 id="LaTeX-数学公式显示测试"><a href="#LaTeX-数学公式显示测试" class="headerlink" title="LaTeX 数学公式显示测试"></a>LaTeX 数学公式显示测试</h2><script type="math/tex; mode=display">\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }</script><h2 id="Mermaid组图显示测试"><a href="#Mermaid组图显示测试" class="headerlink" title="Mermaid组图显示测试"></a>Mermaid组图显示测试</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% mermaid %&#125;<br>Mermaid语句<br>&#123;% endmermaid %&#125;<br>或者<br>​<span class="hljs-code">```mermaid</span><br><span class="hljs-code">代码块……</span><br></code></pre></div></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid" >graph LR;   A-->B;    B-->C;    C-->D;    D-->E;    </code></pre><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建博客常见问题及解决</title>
    <link href="/2021/01/24/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/01/24/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="1-Q：Hexo更换新主题无法成功安装，出错。"><a href="#1-Q：Hexo更换新主题无法成功安装，出错。" class="headerlink" title="1.Q：Hexo更换新主题无法成功安装，出错。"></a>1.<strong>Q</strong>：Hexo更换新主题无法成功安装，出错。</h4><p>   <strong>A</strong>：首先，确保新主题在hexo生成的站点文件的themes文件夹下。其次，确保站点配置文件<em>_config.yml</em>中的theme：之后的字段名字和你下载主题库的文件夹名字相同。</p><h4 id="2-Q：Hexo静态页面报错，丢失样式，并提示"><a href="#2-Q：Hexo静态页面报错，丢失样式，并提示" class="headerlink" title="2.Q：Hexo静态页面报错，丢失样式，并提示"></a>2.<strong>Q</strong>：Hexo静态页面报错，丢失样式，并提示"{% extends ‘_layout.swig‘ %} {% import ‘_macro/post.swig‘ as post_template %}" </h4><p>​    <strong>A</strong>：新版的hexo默认swig未安装，应该重新安装</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">npm i hexo-renderer-swig<br></code></pre></div></td></tr></table></figure><h4 id="3-Q：Hexo静态页面本地版式没问题，deploy到github上出现乱版。"><a href="#3-Q：Hexo静态页面本地版式没问题，deploy到github上出现乱版。" class="headerlink" title="3.Q：Hexo静态页面本地版式没问题，deploy到github上出现乱版。"></a>3.<strong>Q</strong>：Hexo静态页面本地版式没问题，deploy到github上出现乱版。</h4><p>​    <strong>A</strong>：尝试将hexo缓存区清空后重试</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo clean<br></code></pre></div></td></tr></table></figure><a id="more"></a><h4 id="4-Q：Hexo备份"><a href="#4-Q：Hexo备份" class="headerlink" title="4.Q：Hexo备份"></a>4.<strong>Q</strong>：Hexo备份</h4><p>​    <strong>A</strong>：hexo是在本地生成页面后deploy到Github page或者Gitee上的，所以push上去的文件不包括一些源文件，需要备份时可以在github新建一个branch hexo，然后将整个hexo push至github上托管即可。</p><h4 id="5-Q：Hexo菜单栏图标未启用（以next主题为例"><a href="#5-Q：Hexo菜单栏图标未启用（以next主题为例" class="headerlink" title="5.Q：Hexo菜单栏图标未启用（以next主题为例)"></a>5.<strong>Q</strong>：Hexo菜单栏图标未启用（以<strong>next</strong>主题为例)</h4><p>​    <strong>A</strong>：检查自己的站点是否运行在根目录下，运行在子目录下要删除下述代码中的’/‘。(注意，<strong>YAML</strong>语言冒号后面都要有空格，否则会出错；而且/后面也不能有空格，否则会报错，5.0之后的版本已经测试过确实如此)’||’后面表示启用home对应的图标，没有||也是不行的，同时注意<em>menu_icons:</em>菜单栏图标对应关系是否出错。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/||home</span><br></code></pre></div></td></tr></table></figure><h4 id="6-Q：每次撰写新文章时要配置tag、categories等信息很麻烦。"><a href="#6-Q：每次撰写新文章时要配置tag、categories等信息很麻烦。" class="headerlink" title="6.Q：每次撰写新文章时要配置tag、categories等信息很麻烦。"></a>6.<strong>Q</strong>：每次撰写新文章时要配置tag、categories等信息很麻烦。</h4><p>​    <strong>A</strong>：打开Hexo中生成的<strong>scaffold</strong>文档，修改里面三种模板文件draft、page、post的模板，这样以后用下述代码</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo new post &quot;&lt;文章标题&gt;&quot;<br></code></pre></div></td></tr></table></figure><p>生成文章之后，会自动生成你配置好的md文件，以post为例，可以采用如下模板，模板上下的两条横杆不可以省略：<br><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">top:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">cover:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">password:</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">summary:</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure></p><h4 id="7-Q：出现Template-render-error-unknown-path-报错或者出现err-Error-Nunjucks-Error"><a href="#7-Q：出现Template-render-error-unknown-path-报错或者出现err-Error-Nunjucks-Error" class="headerlink" title="7.Q：出现Template render error: (unknown path)报错或者出现err:Error [Nunjucks Error]"></a>7.<strong>Q</strong>：出现Template render error: (unknown path)报错或者出现err:Error [Nunjucks Error]</h4><p>​    <strong>A</strong>：问题在于出现了Hexo无法识别的内容，比如问题6中出现的'{{'以及'}}'或者'{% %}'，如果它不在代码块中，且没被注释，就会报错。还有一种可能就是5中所提到的，YAML代码冒号后面空格未加，也有可能报错。第一种可能的解决办法就是，增加两行识别代码或者将其注释掉。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml">&#123;<span class="hljs-string">%</span> <span class="hljs-string">raw</span> <span class="hljs-string">%</span>&#125;<br><span class="hljs-string">识别报错部分</span><br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">endraw</span> <span class="hljs-string">%</span>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间的流逝</title>
    <link href="/2021/01/23/%E6%97%B6%E9%97%B4%E7%9A%84%E6%B5%81%E9%80%9D/"/>
    <url>/2021/01/23/%E6%97%B6%E9%97%B4%E7%9A%84%E6%B5%81%E9%80%9D/</url>
    
    <content type="html"><![CDATA[<hr><p>​       虽然我们无时无刻不在经历着时间的流逝，但是习以为常的我们可能却很容易忽视这一点，时间就悄悄地从缝隙中一点一滴的溜走了。人们对时间感知的相对性就很强，有些潜心科研的人甚至会忘却周围、忘却时间。要想准确的感知时间，感知一天中我们花了多少时间在某些事情上，我们就需要去刻意的记录它，记录这一过程。</p><p>​       信息时代做到这一点越发容易了，但也仅仅是指我们刻意去记录时才是如此。各种app可以方便地记录你手头上所做的任何一件事——精确到分秒，只要你开始连续做这件事时按下app中自带的计时器即可。一开始记录者可能会惊叹自己想象中的自己和实际偏差之大，其实自己对时间的掌控是渺小的，但令人高兴的是这一切都能改变，俗话说“东隅已逝桑榆非晚”也是一种对前途的乐观与豁达。<br><a id="more"></a><br>​        当然，仔细一想，为何这近年来时间管理app越发火了，可以说是市场需求决定的，步入信息时代，人们反而感觉自己对时间的掌控越来越力不从心。所以一个有趣的现象就是我们更方便的能管理时间了，但其实这个优点是由于我们越来越不善于管理时间而衍生出来的优点。纵观现在的app也不难发现其中的猫腻，app首先肯定要能吸引潜在用户去使用，而且也尽量需要具备一定粘度。最常用的一种工业设计就是“流”设计，就像流水线一样一个接着一个，视频软件里的流设计让你不知不觉的划过很多其实你本来并不需要观看的视频，各种评论区的下拉菜单也让各位读者沉浸在信息爆炸中浑然不知时间的飞逝。如果说“流”设计是“软刀子”，那几乎所有app都具有的推送功能就是“硬刀子”，采用各种算法配适的推送信息最大可能性地去吸引你的注意力。</p><p>​        这些信息陷阱无处不在，似乎防不胜防，但破局之道也不是没有。二维的世界只能看到三维的阴影，同样的，我们只有从虚拟的“低维世界”脱身去现实的“高维世界”，才能不被信息茧房所束缚。每当信息接踵而来时，我们不应该应激的去滑动那无尽的滑动窗口，而是应该站在更高的维度，作为一个真实世界的自己，来审问自己——到底我的目的是什么？是否花了不必要的时间？自己还有什么需要去做的吗？保持清醒的自己，就是对虚拟世界信息垃圾陷阱的一次降维打击，效果往往能出乎人的意料。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
      <tag>方法论</tag>
      
      <tag>思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
