<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/03/27/hello-world/"/>
    <url>/2021/03/27/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>考研语法与长难句解析</title>
    <link href="/2021/03/17/%E8%80%83%E7%A0%94%E8%AF%AD%E6%B3%95%E4%B8%8E%E9%95%BF%E9%9A%BE%E5%8F%A5%E8%A7%A3%E6%9E%90/"/>
    <url>/2021/03/17/%E8%80%83%E7%A0%94%E8%AF%AD%E6%B3%95%E4%B8%8E%E9%95%BF%E9%9A%BE%E5%8F%A5%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="第一部分-简单句"><a href="#第一部分-简单句" class="headerlink" title="第一部分 简单句"></a>第一部分 简单句</h1><h2 id="第一章-简单句的核心"><a href="#第一章-简单句的核心" class="headerlink" title="第一章 简单句的核心"></a>第一章 简单句的核心</h2><h3 id="第一节-简单句的核心构成"><a href="#第一节-简单句的核心构成" class="headerlink" title="第一节 简单句的核心构成"></a>第一节 简单句的核心构成</h3><p>简单句即为描述一件事的句子，长难句为多句简单句的组合。</p><p>核心为：<strong>n. + v.</strong>    &lt;==&gt;   <strong>主语 + 谓语</strong></p><p>谓语动词的分类： 有实义动词、无实义动词</p><h4 id="有实义动词分为："><a href="#有实义动词分为：" class="headerlink" title="有实义动词分为："></a>有实义动词分为：</h4><p>不及物动词vi.</p><p>(<strong>主谓结构</strong>) → Smaller species <u><strong>survived</strong></u>.</p><p>及物动词vt.</p><p>(<strong>①主谓宾结构</strong>) → Everybody <strong><u>loves</u></strong> a fat pay rise.</p><p>(<strong>②主谓双宾语结构</strong>)：”人+物” 或者 “物+介词+人”) → They <u><strong>gave</strong></u> justices permanent positions …</p><p>They <u><strong>gave</strong></u> permanent positions to justices …</p><p>(<strong>③主谓宾宾补结构</strong>)：→You always <strong><u>keep</u></strong> your eyes open …</p><h4 id="无实义动词分为："><a href="#无实义动词分为：" class="headerlink" title="无实义动词分为："></a>无实义动词分为：</h4><p>(连)系动词v</p><p>(<strong>主系表结构</strong>) → This <strong><u>is</u></strong> a dangerous game …</p><h4 id="常用系动词："><a href="#常用系动词：" class="headerlink" title="常用系动词："></a>常用系动词：</h4><p>1.be动词</p><p>2.get become turn go grow</p><p>这些词表示”<strong>变得</strong>“含义的时候为系动词。</p><p>… their behavior <strong><u>became</u></strong> markedly different</p><p>3.look sound smell taste feel</p><p>这些感官动词表示看/听/闻/尝/感觉起来时为系动词</p><p>And most folks still <u><strong>feel</strong></u> pretty comfortable about their ability …</p><p>4.seem  / appear 表示<strong>似乎是</strong></p><p>  keep / remain 表示<strong>保持</strong></p><p>  prove 表示<strong>证明</strong></p><h4 id="考场攻略"><a href="#考场攻略" class="headerlink" title="考场攻略"></a>考场攻略</h4><p>攻略1：根据不及物动词简化句子，分出主谓</p><p>A parallel situation <strong><u>exists</u></strong> in respect of predatory mammals and fish -eating birds.</p><p>简化为：A parallel situation <strong><u>exists</u></strong>.要看细节再看后面非核心部分。</p><p>攻略2：根据及物动词找到分裂结构</p><p>On the other hand, he <strong><u>did not accept</u></strong>  as well founded the charge …</p><p>调整语序为：On the other hand, he <strong><u>did not accept</u></strong>  <strong><em>the charge</em></strong> as well founded  …</p><p>攻略3：判断从句</p><p>宾语从句 - 及物动词后</p><p>表语从句 - 系动词后</p><h3 id="第二节-简单句的核心变化"><a href="#第二节-简单句的核心变化" class="headerlink" title="第二节 简单句的核心变化"></a>第二节 简单句的核心变化</h3><p>主语 + <strong>谓语V.</strong>  </p><p>谓语动词有<u>四种变化</u>：时态、情态、语态、否定</p><p>不管如何变化，只要属于谓语动词的变化，整体算作一个整体谓语动词。</p><h4 id="一、谓语的变化"><a href="#一、谓语的变化" class="headerlink" title="一、谓语的变化"></a>一、谓语的变化</h4><h5 id="1-谓语动词的时态▲"><a href="#1-谓语动词的时态▲" class="headerlink" title="1.谓语动词的时态▲"></a>1.谓语动词的时态▲</h5><p>时态：发生的时间 + 表达出的状态</p><p>表现：谓语动词的变化来体现时态</p><p>时态一共分为十六种：</p><div class="table-container"><table><thead><tr><th style="text-align:center">态\时</th><th style="text-align:center">过去</th><th style="text-align:center">现在</th><th style="text-align:center">将来</th><th style="text-align:center">过去将来</th></tr></thead><tbody><tr><td style="text-align:center"><strong>一般</strong></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center"><strong>进行</strong></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>完成</strong></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><strong>完成进行</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><p>√：重点掌握八种</p><h6 id="1-一般过去时"><a href="#1-一般过去时" class="headerlink" title="(1)一般过去时"></a>(1)一般过去时</h6><p>谓语动词 =  did</p><p>①. India <strong><u>released</u></strong> its AI ethics strategy this spring.</p><p>②. …this city <strong><u>was</u></strong> one of the largest human settlements in the world.</p><p>言外之意是这座城市过去如此，<u>现在已经不是这样了</u>，否则应该用一般现在时。</p><h6 id="2-一般现在时"><a href="#2-一般现在时" class="headerlink" title="(2)一般现在时"></a><strong>(2)一般现在时</strong></h6><p>谓语动词 = do/does</p><p>表示现在常态，或者经常性、习惯性的事，亦可以表示永恒的事，比如地球自转、名言警句等等。</p><p>The goal <strong><u>is</u></strong> new-search, not re-search.</p><p>But most law graduates never <u><strong>get</strong></u> a big-firm job.</p><h6 id="3-一般将来时"><a href="#3-一般将来时" class="headerlink" title="(3)一般将来时"></a>(3)一般将来时</h6><p>谓语动词 =  will do (am/is/are going to do)</p><p>站在现在的视点，看之后将要发生的事。</p><p>表示现在的将来，将来<strong><u>有可能发生</u></strong>的事情，<strong><u>不是一定发生</u></strong>。</p><p>… the problems <strong><u>will be</u></strong> different.</p><h6 id="4-一般-过去将来时"><a href="#4-一般-过去将来时" class="headerlink" title="(4)(一般)过去将来时"></a>(4)(一般)过去将来时</h6><p>站在过去的视点，看之后将要发生的事。</p><p>谓语动词 = would do (was/were going to do)</p><p>常常要和一般过去时搭配使用，有时在一句话中，有时在上下文中，因为没有过去的时间点做参考，那么过去将来就无从谈起。</p><p>They gave justices permanent positions so they <strong><u>would be</u></strong> free upset in power …</p><h6 id="5-过去进行时"><a href="#5-过去进行时" class="headerlink" title="(5)过去进行时"></a>(5)过去进行时</h6><p>谓语动词 = was/were doing</p><p>He <strong><u>was searching</u></strong> for tiny engraved seals …</p><h6 id="6-现在进行时"><a href="#6-现在进行时" class="headerlink" title="(6)现在进行时"></a>(6)现在进行时</h6><p>现在某个时刻正在进行</p><p>谓语动词 = am/is/are doing</p><p>Home prices <strong><u>are holding</u></strong> steady in most regions.</p><p>(7)将来进行时(非重点)</p><p>谓语动词 = will be doing</p><p>表示将来某个时刻正在进行，也可以表示将来某个时刻确定要发生的事情。</p><p>Now, rivals <strong><u>will be charging</u></strong> sales tax …</p><p>进行时态通用谓语变化 = <u>be</u> + doing</p><h6 id="8-过去完成时"><a href="#8-过去完成时" class="headerlink" title="(8)过去完成时"></a>(8)过去完成时</h6><p>表达一个事情截止到<u>过去</u>某个时间点，回头往<strong><u>之前</u></strong>(<strong>时间段</strong>)看完成的结果，不论做完与否。</p><p>谓语动词 = had done</p><p>He <strong><u>had</u></strong> never <strong><u>gambled</u></strong> before the casino sent him a coupon for $20 worth of gambling。</p><p>The interviewers <u><strong>had rated</strong></u> applicants on a scale of one to five.(上下文有表示过去的时间，不一定在同一句中)</p><p>… he <strong><u>expressed</u></strong> the opinion that in two or three respects his mind <strong><u>had changed</u></strong> during the preceding twenty or thirty years.</p><p>此句意思是想法转变在先，因为不难理解同一句中<strong>过去完成时在过去时发生之前</strong>。</p><p>Roman Catholicism <strong><u>had been</u></strong> the state religion …</p><h6 id="9-现在完成时"><a href="#9-现在完成时" class="headerlink" title="(9)现在完成时"></a>(9)现在完成时</h6><p>表达一个事情截止到<u>现在</u>某个时间点，回头往<strong><u>之前</u></strong>(<strong>时间段</strong>)看完成的结果，不论做完与否。</p><p>谓语动词 = have/has done</p><p>The question of GDP and its usefulness <u><strong>has annoyed</strong></u> policymakers for over half a century.</p><p>For the most part, the response <strong><u>has been</u></strong> favorable …</p><p>有时搭配一些修饰强调词：</p><p>just/ever/never/also…</p><p>Most leading retailers <u><strong>have</strong> already <strong>tried</strong></u> commerce, with limited success, and expansion abroad.</p><h6 id="补充1：现在完成时vs-一般过去时"><a href="#补充1：现在完成时vs-一般过去时" class="headerlink" title="补充1：现在完成时vs.一般过去时"></a>补充1：现在完成时vs.一般过去时</h6><p>宏观上：时间段和时间点的区别</p><p>… the response <strong><u>has been</u></strong> favorable … 表示从过去到现在一段时间</p><p>… the response <u><strong>was</strong></u> favorable … 只表示过去，现在已经不是了</p><p>微观上：能否同义转换的区别</p><p>①现在全部完成，可以转换成过去时</p><p>He <u><strong>has left</strong></u>, so I cannot find him now. 强调对现在的影响</p><p>He <u><strong>left</strong></u> two hours ago.强调明确的过去时间发生的事</p><p>②现在部分完成，不能转换为过去时</p><p>We <strong><u>have learned</u></strong> English for 15 years.</p><p>We <strong><u>learned</u></strong> English for 15 years.</p><p>(10)将来完成时(非重点)</p><p>表达一个事情截止到<u>将来</u>某个时间点，回头往<strong><u>之前</u></strong>(<strong>时间段</strong>)看完成的结果，不论做完与否。</p><p>谓语动词 = will have done</p><p>… relaxation will be in front of smell-television, and digital age <strong><u>will have arrive</u></strong>.</p><p>其实所有完成时都类似阶段性总结</p><p>完成时态： 谓语动词 = <u><strong>have</strong></u> + done</p><p>(11)现在完成进行时(非重点)</p><p>谓语动词 = have/has been + doing</p><p>①Big chains <u><strong>have been collecting</strong></u> sales tax nationwide …</p><p>②In recent years, railroads <strong><u>have been combining</u></strong> with each other…</p><h6 id="补充2：完成时态-vs-完成进行时"><a href="#补充2：完成时态-vs-完成进行时" class="headerlink" title="补充2：完成时态 vs. 完成进行时"></a>补充2：完成时态 vs. 完成进行时</h6><p>以现在完成时和现在完成进行时为例</p><p>相同点：都表示“现在的之前”</p><p>两种时态：</p><p>现在完成时→have/has + done</p><p>现在完成进行时→have/has been + doing</p><p>强调方面不同：</p><p>现在完成时→强调结果→We have not won the match.</p><p>现在完成进行时→强调过程→We have been working hard for several months.</p><h5 id="2-谓语动词的情态"><a href="#2-谓语动词的情态" class="headerlink" title="2.谓语动词的情态"></a>2.谓语动词的情态</h5><p>情态：表示对事情的情绪与态度</p><p>①情态动词 + 动词原形</p><div class="table-container"><table><thead><tr><th style="text-align:center">现在时</th><th style="text-align:center">过去时</th></tr></thead><tbody><tr><td style="text-align:center">must</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">can</td><td style="text-align:center"><u><strong>could</strong></u></td></tr><tr><td style="text-align:center">will</td><td style="text-align:center"><u><strong>would</strong></u></td></tr><tr><td style="text-align:center">shall</td><td style="text-align:center"><u><strong>should</strong></u></td></tr><tr><td style="text-align:center">may</td><td style="text-align:center"><u><strong>might</strong></u></td></tr></tbody></table></div><p>②情态动词的时态变化有限，最多只有现在与过去两种。</p><p>could、would、should、might可以不表示过去，而是表示现在<strong><u>更委婉</u></strong>的语气或者表示虚拟。</p><p>③情态动词不存在人称的变化。</p><p>④情态动词变否定/疑问。</p><h6 id="1-情态动词表示“情态”"><a href="#1-情态动词表示“情态”" class="headerlink" title="(1)情态动词表示“情态”"></a>(1)情态动词表示“情态”</h6><p>①<strong>must 必须</strong></p><p>Human drivers sometimes <strong><u>must make</u></strong> split-second decisions.</p><p>②<strong>can / could 能够/可以</strong></p><p>… and the right mental workout can significantly <strong><u>improve</u></strong> our basic cognitive functions.</p><p><strong><u>Could</u></strong> a hug a day <strong><u>keep</u></strong> the doctor away?</p><p>③<strong>will / would 将要/愿意</strong></p><p>The first draft <strong><u>will appear</u></strong> on the page …</p><p>Potential home buyers <u><strong>would cheer</strong></u> for lower interest rates.</p><p>④<strong>may / might 可以/可能</strong></p><p>… expressions <strong><u>may influence</u></strong> emotions rather than just the other way around.</p><p>Upcoming reforms <strong><u>might bring</u></strong> the price to a more reasonable level.</p><p>⑤<strong>should 应该</strong></p><p>Those suffering from persistent nightmares <strong><u>should seek</u></strong> help from a therapist.</p><p>Your outline <strong><u>should</u></strong> smoothly <strong><u>conduct</u></strong> you from one point to the next…</p><h6 id="2-情态动词表示“推测”"><a href="#2-情态动词表示“推测”" class="headerlink" title="(2)情态动词表示“推测”"></a>(2)情态动词表示“推测”</h6><p>以上的情态动词基本都可以表推测，但是区别在于可能性不同。</p><p>可能性最高：must</p><p>可能性最低：can’t, couldn’t, cannot…</p><p>可能性中间：其他词如may、might…</p><p>The details <strong><u>may be</u></strong> unknowable …</p><p>… this loss of mental focus <strong><u>can</u></strong> potentially <strong><u>have</u></strong> a damaging impact on our professional, social, and personal wellbeing.</p><p>情态动词 + do ： 情态动词推测现在</p><p>情态动词 + be doing ： 情态动词推测现在进行</p><p>情态动词 + have done ： 情态动词推测过去(不能加did，因为要原型)</p><p>… the peculiar way of conducting the experiments <strong><u>may have led</u></strong> to misleading interpretation of what happened.</p><p>… the community <strong><u>should be grasping</u></strong> the opportunity to raise its influence in the real world.</p><h5 id="3-谓语动词的语态"><a href="#3-谓语动词的语态" class="headerlink" title="3.谓语动词的语态"></a>3.谓语动词的语态</h5><p>语态主要分为两大类，主动语态和被动语态。</p><p>表示主语是动作的发出者还是承受者。</p><p>被动语态的构成：be + done</p><p>Step1：done表示被动的动作</p><p>step2：be负责表示被动的时间</p><p>Step3：be根据主语写单复数</p><p>Unfortunately, these critics <strong><u>are forgotten</u></strong>.</p><p>不幸地是，这些评论家(现在)都被遗忘了</p><h6 id="1-被动和时态相结合▲"><a href="#1-被动和时态相结合▲" class="headerlink" title="(1)被动和时态相结合▲"></a>(1)被动和时态相结合▲</h6><p>通过be来改变时态，谓语一般不变</p><div class="table-container"><table><thead><tr><th>这些评论家<u>(过去)被</u>遗忘了。</th><th>These critics <strong><u>were</u></strong> forgotten</th></tr></thead><tbody><tr><td>这些评论家<strong><u>(现在)被</u></strong>遗忘了。</td><td>These critics <strong><u>are</u></strong> forgotten</td></tr><tr><td>这些评论家将会<u><strong>(现在的将来)被</strong></u>遗忘。</td><td>These critics <strong><u>will be</u></strong> forgotten</td></tr><tr><td>这些评论家将会<strong><u>(过去的将来)被</u></strong>遗忘。</td><td>These critics <strong><u>would be</u></strong> forgotten</td></tr><tr><td>这些评论家<u><strong>过去正在被</strong></u>遗忘。</td><td>These critics <strong><u>were being</u></strong> forgotten</td></tr><tr><td>这些评论家<u><strong>现在正在被</strong></u>遗忘。</td><td>These critics <strong><u>are being</u></strong> forgotten</td></tr><tr><td>这些评论家<strong><u>过去已经(过去的之前)被</u></strong>遗忘了。</td><td>These critics <strong><u>had been</u></strong> forgotten</td></tr><tr><td>这些评论家<strong><u>现在已经(现在的之前)被</u></strong>遗忘了。</td><td>Theses critics <strong><u>have been</u></strong> forgotten</td></tr></tbody></table></div><p>The truth <strong><u>will not be known</u></strong> for years. 一般将来时的被动。</p><p>Most archaeological sites <strong><u>have been located</u></strong> by means of careful searching …</p><h6 id="2-被动和情态相结合"><a href="#2-被动和情态相结合" class="headerlink" title="(2)被动和情态相结合"></a>(2)被动和情态相结合</h6><p>In the Internet age, at least in theory, this fraction <strong><u>can be</u></strong> much <strong><u>reduced</u></strong>.</p><p>Those first few days <strong><u>should be spent</u></strong> looking for work …</p><h5 id="4-谓语动词的否定与强调"><a href="#4-谓语动词的否定与强调" class="headerlink" title="4.谓语动词的否定与强调"></a>4.谓语动词的否定与强调</h5><h6 id="1-实义动词变否定"><a href="#1-实义动词变否定" class="headerlink" title="(1)实义动词变否定"></a>(1)实义动词变否定</h6><p>do/does/did + not + 动词原形</p><p>①American professor <strong><u>did not possess</u></strong> one.</p><p>②They <strong><u>do not fund</u></strong> peer-reviewed research.</p><p>③… it <strong><u>doesn’t work</u></strong> very well for very long.</p><h6 id="2-助动词和情态动词否定"><a href="#2-助动词和情态动词否定" class="headerlink" title="(2)助动词和情态动词否定"></a>(2)助动词和情态动词否定</h6><p>助动词和情态动词 + not</p><p>(be动词、情态动词、完成时态中的have等)</p><p>①To be sure, the future <strong><u>is not</u></strong> all rosy.</p><p>②With other audience you <strong><u>mustn’t attempt</u></strong> to cut in with humor …</p><p>③… average height … <strong><u>hasn’t</u></strong> really <strong><u>changed</u></strong> since 1960.</p><h6 id="3-谓语动词的强调（类似变否定）"><a href="#3-谓语动词的强调（类似变否定）" class="headerlink" title="(3)谓语动词的强调（类似变否定）"></a>(3)谓语动词的强调（类似变否定）</h6><p>do/does/did + 动词原形</p><p>①Although the figure may vary, analysts <strong><u>do agree</u></strong> on another matter …</p><p>②But science <strong><u>does provide</u></strong> us with the best available guide to the future …</p><p>③The court <strong><u>did suggest</u></strong>(指出、表明) that accepting favors in return for opening doors is “distasteful” and “nasty”.</p><h5 id="5-考场攻略"><a href="#5-考场攻略" class="headerlink" title="5.考场攻略"></a>5.考场攻略</h5><h6 id="攻略1：定位谓语动词-确定长难句包含了几件事"><a href="#攻略1：定位谓语动词-确定长难句包含了几件事" class="headerlink" title="攻略1：定位谓语动词, 确定长难句包含了几件事"></a>攻略1：定位谓语动词, 确定长难句包含了几件事</h6><p>The same dramatic technological changes that have <u><strong>provided</strong></u> marketers with more communications choices <strong><u>have</u></strong> also <strong><u>increased</u></strong> the risk that passionate consumers <strong><u>will voice</u></strong> their opinions in quicker, more visible, and much more damaging ways.  (2011, Reading Comprehension, Part A Text 3) </p><h6 id="攻略2：定位谓语动词，准确找到主语"><a href="#攻略2：定位谓语动词，准确找到主语" class="headerlink" title="攻略2：定位谓语动词，准确找到主语"></a>攻略2：定位谓语动词，准确找到主语</h6><p>… <u>national spending on social sciences and the humanities as a percentage of all research and development funds</u>[主语] — including government, higher education, non‐profit and corporate ‐ <u><strong>varied</strong></u> from around 4% to 25%; …  (2013, Reading Comprehension, Part B) </p><h4 id="二、主语宾语表语的变化"><a href="#二、主语宾语表语的变化" class="headerlink" title="二、主语宾语表语的变化"></a>二、主语宾语表语的变化</h4><p><strong>主语</strong> + 谓语V. + <strong>宾语/表语</strong></p><p>主语4种变化：名词/代词、doing、to do、并列多个都可以做主语。</p><p>宾语和主语变化类似有4中变化。</p><p>表语还额外多出两种：形容词和介词短语也可以作表语。</p><p>如何快速定位主宾表：以谓语为分界线，前面为主语，后面为宾表语。</p><h5 id="1-doing作主宾表"><a href="#1-doing作主宾表" class="headerlink" title="1.doing作主宾表"></a>1.doing作主宾表</h5><h6 id="1-doing作主语"><a href="#1-doing作主语" class="headerlink" title="(1)doing作主语"></a>(1)doing作主语</h6><p>①… <strong><u>suffering</u></strong> is inevitable …</p><p>②<strong><u>Making friends</u></strong> is extremely important to teenagers …</p><p>不仅单个词，doing词组也可以作主语</p><p>③On the other hand, <strong><u>putting your faith in the wrong place</u></strong> often carries a high price.</p><h6 id="2-doing作宾语"><a href="#2-doing作宾语" class="headerlink" title="(2)doing作宾语"></a>(2)doing作宾语</h6><p>可以作动宾或者介宾</p><p>①Americans stopped <strong><u>taking prosperity for granted</u></strong>. 动宾</p><p>②Thinking is essentially a process of <strong><u>making connections in the brain</u></strong>. 介宾</p><h6 id="3-doing作表语-非重点"><a href="#3-doing作表语-非重点" class="headerlink" title="(3)doing作表语(非重点)"></a>(3)doing作表语(非重点)</h6><p>需要区分是否是进行时还是系表，是否是分开，因此比较少出现</p><p>My dream is <strong><u>travelling around the world.</u></strong></p><h5 id="2-to-do作主宾表"><a href="#2-to-do作主宾表" class="headerlink" title="2.to do作主宾表"></a>2.to do作主宾表</h5><h6 id="1-to-do-作主语"><a href="#1-to-do-作主语" class="headerlink" title="(1)to do 作主语"></a>(1)to do 作主语</h6><p>①… <strong><u>to anticipate every imaginable driving situation</u></strong> is a difficult programming problem. </p><p>通常情况下，to do 和 doing完全可以相互转化，但注意要前后对应，前后都用doing 或者 to do</p><p>ex： To see is to believe.    Seeing is believing.</p><p>②<strong><u>To do so</u></strong> is important.</p><p>也可以往后放平衡结构： <strong><u>It</u></strong> is important <strong><u>to do so</u></strong>.</p><p>③… <strong><u>it</u></strong> took Beaumont decades <strong><u>to perfect her craft</u></strong> …</p><p>这种结构很经常使用，一般to do放后面的情况较多：</p><p><strong>It takes sb. some time to do sth.</strong></p><p>④So <strong><u>it</u></strong> seems paradoxical <strong><u>to talk about habits in the same context as creativity and innovation</u></strong>.</p><h6 id="2-to-do-作宾语"><a href="#2-to-do-作宾语" class="headerlink" title="(2)to do 作宾语"></a>(2)to do 作宾语</h6><p>doing作宾语可以作动宾或者介宾但是，to do<strong>不能作介宾</strong>，不可以接在介词后。</p><p>They may then decide <strong><u>to go elsewhere</u></strong>.</p><p>The decisions made <strong><u>it</u></strong> more difficult for states <strong><u>to collect sales tax on certain online purchases</u></strong>.</p><h6 id="3-to-do-作表语"><a href="#3-to-do-作表语" class="headerlink" title="(3)to do 作表语"></a>(3)to do 作表语</h6><p>①The trick is <strong><u>to direct these funds better</u></strong>. </p><p>②The commission(委员会) was also <strong><u>to consider possible arrangements for the War and Navy Departments</u></strong>.  </p><h5 id="3-并列多个作主宾表"><a href="#3-并列多个作主宾表" class="headerlink" title="3.并列多个作主宾表"></a>3.并列多个作主宾表</h5><p>原则要同类的多个才可以</p><p>①<strong><u>Science</u> and <u>technology</u></strong> would cure all the ills of humanity…</p><p>②Second, they are mostly <strong><u>bright and well‐educated</u></strong>.</p><p>③Social science disciplines include <strong><u>geography, economics, political science, psychology, and sociology</u></strong>. </p><p>多个一样的and可省略并且改为逗号。</p><p>④That doesn’t mean <u>lying down <strong>and</strong> becoming fooled, <strong>or</strong> letting foreign corporations run uncontrolled</u></p><p>⑤The researchers mapped <u><strong>not only</strong> the city’s vast and ornate ceremonial areas, <strong>but also</strong> hundreds of simpler apartment complexes</u>… </p><p>并列连词也可以用词组，而不是单单的使用and或or。</p><h5 id="4-考场攻略"><a href="#4-考场攻略" class="headerlink" title="4.考场攻略"></a>4.考场攻略</h5><h6 id="·找到主宾表"><a href="#·找到主宾表" class="headerlink" title="·找到主宾表"></a>·找到主宾表</h6><p>①Since our chief business with them is <strong><u>to enable them to share in a common life</u></strong> …</p><p>to do词组作表语</p><p>②… because <strong><u>building new educational systems there and putting enough people through them to improve economic performance</u></strong> would require two or three generations. </p><h2 id="第二章-简单句的扩展"><a href="#第二章-简单句的扩展" class="headerlink" title="第二章 简单句的扩展"></a>第二章 简单句的扩展</h2><h3 id="第一节-词性角度的扩展"><a href="#第一节-词性角度的扩展" class="headerlink" title="第一节 词性角度的扩展"></a>第一节 词性角度的扩展</h3><h4 id="一、限定词-了解"><a href="#一、限定词-了解" class="headerlink" title="一、限定词(了解)"></a>一、限定词(了解)</h4><p>1.冠词 the / a / an</p><p><strong><u>The</u></strong> roughly <strong><u>20 million</u></strong> inhabitants of these nations looked hopefully to the future.</p><p>2.名词所有格、数词</p><p>①<strong><u>Mark Twain’s</u></strong> Huckleberry Finn exemplified American anti‐intellectualism. </p><p>②By <strong><u>the third</u></strong> generation, <strong><u>one third</u></strong> of Hispanic women are married to non‐Hispanics, and <strong><u>41 percent of</u></strong> Asian‐American women are married to non‐Asians.</p><p>3.名词</p><h4 id="二、形容词、副词"><a href="#二、形容词、副词" class="headerlink" title="二、形容词、副词"></a>二、形容词、副词</h4><h5 id="1-形容词、副词作修饰成分"><a href="#1-形容词、副词作修饰成分" class="headerlink" title="1.形容词、副词作修饰成分"></a>1.形容词、副词作修饰成分</h5><p>The <strong><u>angry</u></strong> boy shouted <u><strong>angrily</strong></u>.</p><h5 id="2-形容词修饰名词"><a href="#2-形容词修饰名词" class="headerlink" title="2.形容词修饰名词"></a>2.形容词修饰名词</h5><p>①The idea seems <strong><u>promising</u></strong>, and Rosenberg is a <strong><u>perceptive</u></strong> observer.</p><p>②Their thinking often had a <strong><u>traditional superstitious(迷信的) quality(特点).</u></strong></p><h5 id="3-副词修饰动词、句子、其他的形容词副词"><a href="#3-副词修饰动词、句子、其他的形容词副词" class="headerlink" title="3.副词修饰动词、句子、其他的形容词副词"></a>3.副词修饰动词、句子、其他的形容词副词</h5><p>副词修饰形容词修饰的名词以外的成分</p><p>①… and the right mental workouts can <u><strong>significantly</strong></u> improve our basic cognitive functions.</p><p>②<strong><u>Similarly</u></strong>, the physical act of laughter could improve mood. </p><p>③The tourist streams are not <strong><u>entirely</u></strong> separate.   </p><p>④… because they are <strong><u>so</u></strong> closely tied. </p><h5 id="4-形容词、副词的三种比较级别"><a href="#4-形容词、副词的三种比较级别" class="headerlink" title="4.形容词、副词的三种比较级别"></a>4.形容词、副词的三种比较级别</h5><h6 id="1-原级比较"><a href="#1-原级比较" class="headerlink" title="(1)原级比较"></a>(1)原级比较</h6><p><strong>as + <u>adj./adv.原形（比较的内容</u>） + as ＋比较的对象 “和……相比一样的……”</strong> </p><p>The goals of the prize‐givers seem <strong><u>as scattered as the criticism</u></strong>.</p><h6 id="2-比较级"><a href="#2-比较级" class="headerlink" title="(2)比较级"></a>(2)比较级</h6><p><strong>adj./adv.的比较级 + (than + 比较的对象)</strong></p><p>“(和……相比)更…”</p><p>通常用于两者(或部分)之间的比较。</p><p>①… <strong><u>younger, healthier</u></strong> people can realize(使…成真) their potential. </p><p>②Rich economies are also <strong><u>less dependent</u></strong> on oil <strong><u>than they were</u></strong>, and so <strong><u>less sensitive</u></strong> to swings in the oil price. </p><p>③For the first time in history <strong><u>more</u></strong> people live in towns <strong><u>than in the country</u></strong>. </p><h6 id="3-最高级"><a href="#3-最高级" class="headerlink" title="(3)最高级"></a>(3)最高级</h6><p><strong>adj./adv.的最高级 ＋ （介词短语表示比较的范围）</strong> </p><p>“(……范围内)最……” 通常用于三者或以上的比较 ①Some of <strong><u>the biggest</u></strong> developments will be <strong><u>in medicine</u></strong>…</p><p>②<strong><u>The most obvious</u></strong> example is late‐stage cancer care. </p><h4 id="三、介词短语▲"><a href="#三、介词短语▲" class="headerlink" title="三、介词短语▲"></a>三、介词短语▲</h4><h5 id="1-表示时间的介词"><a href="#1-表示时间的介词" class="headerlink" title="1.表示时间的介词"></a>1.表示时间的介词</h5><div class="table-container"><table><thead><tr><th style="text-align:center">介词</th><th style="text-align:center">表达含义</th></tr></thead><tbody><tr><td style="text-align:center">at/on/in</td><td style="text-align:center">在…时间点/时间上/时间内</td></tr><tr><td style="text-align:center">before/after</td><td style="text-align:center">在…时间之前/之后</td></tr><tr><td style="text-align:center">from, since</td><td style="text-align:center">自从…时间</td></tr><tr><td style="text-align:center">by, until</td><td style="text-align:center">截止到(直到)….时间</td></tr><tr><td style="text-align:center">for</td><td style="text-align:center">持续…时间</td></tr><tr><td style="text-align:center">during</td><td style="text-align:center">在…期间</td></tr></tbody></table></div><p><strong><u>In March 1997</u></strong> he lost $72186.</p><p><strong><u>Since the days</u></strong> of Aristotle, a search for universal principles has characterized the scientific enterprise. </p><p>注：since+过去的时间或者动作，需要用现在完成时，因为是默认的时间点是现在。</p><p><strong><u>By 1854</u></strong> slavery had been abolished everywhere except Spain’s remaining colonies. </p><p>注：By + 时间，通常搭配完成时，具体是看直到什么时间。</p><p><strong><u>For years</u></strong> executives and headhunters have adhered to the rule…</p><h5 id="2-表示地点或者范围的介词"><a href="#2-表示地点或者范围的介词" class="headerlink" title="2.表示地点或者范围的介词"></a>2.表示地点或者范围的介词</h5><div class="table-container"><table><thead><tr><th style="text-align:center">介词</th><th style="text-align:center">表达含义</th></tr></thead><tbody><tr><td style="text-align:center">at/in</td><td style="text-align:center">在…地点/在…里面</td></tr><tr><td style="text-align:center">on, above, over/ under, below</td><td style="text-align:center">在…上面/下面</td></tr><tr><td style="text-align:center">in front of/ behind</td><td style="text-align:center">在…之前/之后</td></tr><tr><td style="text-align:center">near, by, beside</td><td style="text-align:center">在…旁边</td></tr><tr><td style="text-align:center">between, among</td><td style="text-align:center">在…之间(两者/三者或以上之间)</td></tr></tbody></table></div><p>at-in-on：点-面-体</p><div class="table-container"><table><thead><tr><th style="text-align:center">介词</th><th style="text-align:center">表达含义</th></tr></thead><tbody><tr><td style="text-align:center">around</td><td style="text-align:center">在…周围</td></tr><tr><td style="text-align:center">into/ out of</td><td style="text-align:center">进入…里面/从…出去</td></tr><tr><td style="text-align:center">onto/ off</td><td style="text-align:center">到…上面/脱离…</td></tr><tr><td style="text-align:center">across, through/ past</td><td style="text-align:center">穿过…/经过…</td></tr><tr><td style="text-align:center">along</td><td style="text-align:center">沿着</td></tr><tr><td style="text-align:center">from/ to</td><td style="text-align:center">来自…./朝着….</td></tr></tbody></table></div><p><strong><u>Behind the scenes</u></strong>, they have been taking aim <strong><u>at someone else</u></strong>: the accounting standard‐setters. </p><div class="table-container"><table><thead><tr><th style="text-align:center">介词</th><th style="text-align:center">表达含义</th></tr></thead><tbody><tr><td style="text-align:center">of</td><td style="text-align:center">…的…(表示属性)(“A of B” 通常翻译为 “B的A”)</td></tr><tr><td style="text-align:center">about</td><td style="text-align:center">关于……</td></tr><tr><td style="text-align:center">with/without</td><td style="text-align:center">伴随着有…/没有….</td></tr><tr><td style="text-align:center">for</td><td style="text-align:center">为了…..(表示目的)</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">因为…..(表示原因)</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">对于…..(表示对象)</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center">介词</th><th style="text-align:center">表达含义</th></tr></thead><tbody><tr><td style="text-align:center">by</td><td style="text-align:center">通过…方式或方法</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">被…做(被动语态+by+动作的发出者)</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">相差了…(表示变化的差额)</td></tr><tr><td style="text-align:center">as</td><td style="text-align:center">作为…….</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">像……一样, 如图……</td></tr><tr><td style="text-align:center">like</td><td style="text-align:center">像…..一样</td></tr><tr><td style="text-align:center">despite</td><td style="text-align:center">尽管…….</td></tr></tbody></table></div><p>… most people stick <strong><u>with default settings</u></strong>. </p><p>In the past decade, the Japanese divorce rate… has increased <strong><u>by more than 50 percent</u></strong> …</p><h5 id="3-考场攻略"><a href="#3-考场攻略" class="headerlink" title="3.考场攻略"></a>3.考场攻略</h5><h6 id="1-简化句子，找核心"><a href="#1-简化句子，找核心" class="headerlink" title="(1)简化句子，找核心"></a>(1)简化句子，找核心</h6><p><strong>The decision</strong> <u>of the New York Philharmonic</u> to hire Alan Gilbert <u>as its next music director</u> <strong>has been the talk</strong> <u>of the classical‐music world</u> <u>ever since the sudden announcement</u> <u>of his appointment</u> in 2009. </p><p>划线的部分是介词非核心，to hire Alan Gilbert是非谓语的非核心，都可以先省去不看。</p><h3 id="第二节-成分角度的扩展"><a href="#第二节-成分角度的扩展" class="headerlink" title="第二节 成分角度的扩展"></a>第二节 成分角度的扩展</h3><h4 id="一、非谓语动词作定语、状语"><a href="#一、非谓语动词作定语、状语" class="headerlink" title="一、非谓语动词作定语、状语"></a>一、非谓语动词作定语、状语</h4><p>什么是非谓语动词？</p><p>什么时候用非谓语动词？</p><p>非谓语动词有哪几种？</p><p>doing (表示主动)/ done (表示被动)/ to do(表示目的)</p><p>非谓语动词的用途？</p><p>1、相当于名词，作主/宾/表语</p><p>2、修饰名词/句子，作定语/状语</p><p>三步走：①判断要不要用非谓语 ②判断参照物 ③选择非谓语</p><p>A team of researchers <u><strong>working</strong> together in the he laboratory</u> would submit the results of their research to a journal. </p><h5 id="考场攻略-1"><a href="#考场攻略-1" class="headerlink" title="考场攻略"></a>考场攻略</h5><h6 id="攻略-1：非谓语动词词组的完整性"><a href="#攻略-1：非谓语动词词组的完整性" class="headerlink" title="攻略 1：非谓语动词词组的完整性"></a>攻略 1：非谓语动词词组的完整性</h6><p>The <u><strong>networked</strong></u> computer offers the first chance in 50 years <u><strong>to reverse</strong> the flow</u>, <u><strong>to encourage</strong> thoughtful downloading and… meaningful uploading</u>. </p><h6 id="攻略-2：准确找到非谓语动词所修饰的对象"><a href="#攻略-2：准确找到非谓语动词所修饰的对象" class="headerlink" title="攻略 2：准确找到非谓语动词所修饰的对象"></a>攻略 2：准确找到非谓语动词所修饰的对象</h6><p>a.非谓语动词的位置 </p><p>就近有无名词，意思是否搭配</p><p>b.与句子间是否有逗号隔开 </p><p>c.代入法(100%有效的方法，代入观察是否意思搭配)</p><p>I saw a <u>passing</u> plane. </p><p><u>Passing the cafe</u>, I saw a friend. </p><p>Archaeologists commonly use computers <u><strong>to map(绘制地点) sites and the landscapes around sites.</strong></u>  </p><p>代入可知，to map和考古学家更搭配，和computer不搭配</p><h6 id="攻略-3：非谓语动词的去留"><a href="#攻略-3：非谓语动词的去留" class="headerlink" title="攻略 3：非谓语动词的去留"></a>攻略 3：非谓语动词的去留</h6><p>长难的非核心可以先去掉，之后再看细节。</p><h4 id="二、同位语、插入语"><a href="#二、同位语、插入语" class="headerlink" title="二、同位语、插入语"></a>二、同位语、插入语</h4><p>一定非核心，需要知道，但不用重点掌握</p><h5 id="1-同位语"><a href="#1-同位语" class="headerlink" title="1.同位语"></a>1.同位语</h5><p>… the number of papers including the keywords <strong><u>“environmental change” or “climate change”</u></strong> have increased rapidly since 2004.</p><p>His concern is mainly with the humanities: <strong><u>Literature, languages, philosophy and so on</u></strong>.   </p><h6 id="专有名词-vs-普通名词"><a href="#专有名词-vs-普通名词" class="headerlink" title="专有名词 vs. 普通名词"></a>专有名词 vs. 普通名词</h6><p>It said that Internet Explorer 10, <strong><u>the version due to appear with windows 8</u></strong>, would have DNT as a default.  </p><p>Its current leader, <strong><u>Ed Miliband</u></strong>, owes(归功于) his position to votes from public‐sector unions. </p><p>Brendon Lynch, <strong><u>Microsoft’s chief privacy officer</u></strong>, blogged: “We believe consumers should have more control.” </p><p>It usually leads to no good <strong><u>— drinking, drugs and casual sex</u></strong>.</p><p>Behind the scenes, they have been taking aim at someone else: <strong><u>the accounting standard‐setters</u></strong>.  </p><p>句子中间两逗号，句子末尾一个破折号or冒号引出同位语。</p><h5 id="2-插入语"><a href="#2-插入语" class="headerlink" title="2.插入语"></a>2.插入语</h5><p>插入语一般前后有<strong>成对</strong>的标点，去掉前后可以连贯。</p><p>… positive health habits<strong><u>—as well as negative ones—</u></strong>spread through networks of friends via social communication. </p><h6 id="1-主谓结构作插入语"><a href="#1-主谓结构作插入语" class="headerlink" title="(1)主谓结构作插入语"></a>(1)主谓结构作插入语</h6><p> You can, <strong><u>Mr. Menand points out</u></strong>, become a lawyer in three years and a medical doctor in four. </p><p>This speeding up of life, <u><strong>says the Futurist</strong></u>, requires a new form of expression. </p><h6 id="2-副词作插入语"><a href="#2-副词作插入语" class="headerlink" title="(2) 副词作插入语"></a>(2) 副词作插入语</h6><p>These facts, <strong><u>however</u></strong>, have previously been thought unrelated.  </p><p>but 放两句话之间作连词，however在一句内作插入语</p><p>A deal is a deal — except, <u><strong>apparently</strong></u>, when Entergy is involved. </p><h6 id="3-介词短语作插入语"><a href="#3-介词短语作插入语" class="headerlink" title="(3) 介词短语作插入语"></a>(3) 介词短语作插入语</h6><p>Other standardized tests, <strong><u>such as the Scholastic Assessment Test (SAT) and the Graduate Record Exam (GRE)</u></strong>, capture the main aspects of IQ tests. </p><p>Amateurs, <u><strong>on the other hand</strong></u>, have continued to pursue local(局部的) studies in the old way.</p><p>同位语和插入语的区别 </p><p>Tony, <u>my teacher,</u> is coming here. 同位语(和前面名词有关系)</p><p>Tony, <u>with his students</u>, is coming here. 插入语(和前后都无关)</p><p>不用纠结是同位语还是插入语，能判断出是补充说明的非核心即可。</p><h5 id="3-考场攻略-1"><a href="#3-考场攻略-1" class="headerlink" title="3.考场攻略"></a>3.考场攻略</h5><p>简单句的核心+扩展 – 攻略                                      </p><p>读句子：去扩展看核心看扩展 </p><p>写句子：写核心、写扩展       </p><p>(1)<u><strong>A</strong></u> small <strong><u>step has been taken</u></strong> in the direction of a national agency with the creation of the Canadian Coordinating Office for Health Technology Assessment, funded by Ottawa and the provinces. (2)<strong><u>Sharpening judgment</u></strong> by absorbing and reflecting on law <strong><u>is a</u></strong> desirable <strong><u>component</u></strong> of a journalist’ s intellectual preparation for his or her career. </p>]]></content>
    
    
    <categories>
      
      <category>基础</category>
      
      <category>英语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>英语</tag>
      
      <tag>语法</tag>
      
      <tag>长难句</tag>
      
      <tag>考研</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解忧杂货铺书摘</title>
    <link href="/2021/03/03/%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E9%93%BA%E4%B9%A6%E6%91%98/"/>
    <url>/2021/03/03/%E8%A7%A3%E5%BF%A7%E6%9D%82%E8%B4%A7%E9%93%BA%E4%B9%A6%E6%91%98/</url>
    
    <content type="html"><![CDATA[<p>《解忧杂货店》 书摘</p><p>或许每个人内心深处都有一座解忧杂货铺，当你往里面投递的时候，或许得到的是劈头盖脸的反对，这时你可能会感到慌张，或许得到的是肯定的支持，这时你可能会感到心安，有时候其实你的内心深处是知道答案的，只是希望得到一个肯定的答复。但是无论你同意还是反对，只要你去尝试，不都是向着自己梦想的方向付之努力吗？</p><p>虽然度过了几年大学时光，所学知识你可能受用终身，可能觉得无聊毫无用处，大学生活可能充实，可能空虚，但对于漫漫人生长路来说，你的地图还无异于一张白纸。</p><p>本来还想随便写写，没成想作者都替我说了，就此搁笔，下面是一些摘录。</p><p>“你说父母都支持你。只要是亲生父母，除非你去犯罪，否则你干什么他们不支持呢？所以说，你怎么能把这话当真？”</p><p>“我也好，鱼松也好，都还没脆弱到需要你照顾的程度。所以你不要想这有的没的，再去全力打拼一次，在东京奋战一场。<strong>就算最后打了败仗也无所谓，至少你留下了自己的足迹。</strong>做不到这点你就不要回来，明白了吧？”</p><p>说不定读到这封信时，你已经改变了心意。</p><p>到底是好是坏，我也不知道。</p><p>但有一点我想告诉你。</p><p>你对音乐的执着追求，绝不是白白付出。</p><p>我相信，将来会有人因为你的歌而得到救赎。你创作的音乐也必将流传下去。</p><p>若要问我为何能如此断言，我也很难回答，但这的确是事实。</p><p><strong>请你始终坚信这一点，坚信到生命最后一刻。</strong></p><p>“不管是骚扰还是恶作剧，写这些信给浪矢杂货店的人，和普通咨询者在本质上是一样的。<strong>他们都是内心破了个洞，重要的东西正从那个破洞逐渐流失。</strong>证据就是，这样的人也一定会来拿回信，他会查看牛奶箱。因为他很想知道，浪矢爷爷会怎样回复自己的信。你想想看，就算是瞎编的烦恼，要一口气想出三十个也不简单。既然费了那么多心思，怎么可能不想知道答案？所以我不但要写回信，而且要好好思考后再写。人的心声是绝对不能无视的。”</p><p>“<strong>很多时候，咨询的人心里已经有了答案，来咨询只是想确认自己的决定是对的。</strong>所以有些人读过回信后，会再次写信过来，大概就是因为回答的内容和他的想法不一样吧。”</p><p>“我的回答之所以发挥了作用，原因不是别的，<strong>是因为他们自己很努力。</strong>如果自己不想积极认真地生活，不管得到什么样的回答都没用。”</p><p>以下这段话给无名氏朋友：</p><p>我这个老头子绞尽脑汁思考了你寄给我空白信纸的理由，因为我觉得一定是一件很重要的事，不能随随便便回答。我开动快要糊涂的脑筋想了又想，最后认为这代表<strong>没有地图</strong>的意思。</p><p>如果说，来找我咨询烦恼的人是迷路的羔羊，通常他们手上都有地图，却没有去看，或是不知道自己目前的位置。 但我相信你不属于任何一种情况，<strong>你的地图是一张白纸</strong>，所以，即使想决定目的地，也不知道路在哪里。</p><p><strong>地图是一张白纸，这当然很伤脑筋，任何人都会不知所措。</strong></p><p>但是，<strong>不妨换一个角度思考，正因为是白纸，才可以随心所欲描绘地图，一切全在你自己。对你来说，一切都是自由的，在你的面前是无限可能。这可是很棒的事情啊。我衷心祈祷你可以相信自己，无悔地燃烧自己的人生。</strong></p><p>我以后应该不会再回答烦恼咨询了。感谢你在最后问了一个很有价值的难题。</p><p>​                                                     </p><p>浪矢杂货店</p><p> <img src="/2021/03/03/解忧杂货铺书摘/解忧杂货铺时间线.png" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>书摘</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思考</tag>
      
      <tag>读书</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>日本麻雀笔记</title>
    <link href="/2021/03/02/%E6%97%A5%E6%9C%AC%E9%BA%BB%E9%9B%80%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/03/02/%E6%97%A5%E6%9C%AC%E9%BA%BB%E9%9B%80%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="一、日麻点数计算"><a href="#一、日麻点数计算" class="headerlink" title="一、日麻点数计算"></a>一、日麻点数计算</h2><h3 id="1-符数计算"><a href="#1-符数计算" class="headerlink" title="1.符数计算"></a>1.符数计算</h3><p><img src="/2021/03/02/日本麻雀笔记/符数表.png" alt=""></p><p>符数速记：</p><ul><li><p>平和荣和 = 30符；</p></li><li><p>平和自摸 = 20符；</p></li></ul><ul><li>非平和型门前清荣和 = 40符；</li></ul><ul><li><p>副露刻子 ≤ 1 个 ≈ 30符；</p></li><li><p>七对子 = 25符(固定)；</p></li></ul><h3 id="2-点数计算"><a href="#2-点数计算" class="headerlink" title="2.点数计算"></a>2.点数计算</h3><ul><li>计算公式为：亲家得点 = 6×符数×2^(番+2)   子家得点 = 4×符数×2^(番+2)</li></ul><ul><li>向上取整百，不可以小于1000。</li></ul><h3 id="3-点数表"><a href="#3-点数表" class="headerlink" title="3.点数表"></a>3.点数表</h3><p><img src="/2021/03/02/日本麻雀笔记/点数表.png" alt=""></p><p>最后亲家自摸：三家点数平分，向上取整；</p><p>子家自摸：点数亲家出一半，两家子家各四分之一，向上取整；</p><h2 id="二、何切"><a href="#二、何切" class="headerlink" title="二、何切"></a>二、何切</h2><h3 id="1-幺九别乱切"><a href="#1-幺九别乱切" class="headerlink" title="1.幺九别乱切"></a>1.幺九别乱切</h3><h4 id="a-幺九打了损边张进张？"><a href="#a-幺九打了损边张进张？" class="headerlink" title="a.幺九打了损边张进张？"></a>a.幺九打了损边张进张？</h4><p><img src="/2021/03/02/日本麻雀笔记/幺九别乱切01.png" alt=""></p><p>如图是一个<strong>一向听</strong>的牌，这里全牌效应该切3p而不是幺九1s，打了1s直接损4张3s进张。</p><p>一向听需要考虑<strong>最终听牌型</strong>：</p><p>打3p，进2s、3s、4s共8张牌最终<strong>都是好型听牌</strong>，进6、9s共7张牌最终是<strong>双碰听牌</strong>或者<strong>边张3s听牌</strong>，良型率53.3%</p><p>有需要的话可以选择打1s改良，打1s向听数不变，进1p、2p、4p、5p可以改良，进24p有一杯口机会，一向听打出4s可以平和确定。</p><h4 id="b-二度进张拆了退向听？"><a href="#b-二度进张拆了退向听？" class="headerlink" title="b.二度进张拆了退向听？"></a>b.二度进张拆了退向听？</h4><p><img src="/2021/03/02/日本麻雀笔记/幺九别乱切02.png" alt=""></p><p>如图，虽然说13p和34p有2p的二度进张，但是这里搭子只有4个，可以拆解为”345 66 78m + 1334p”如果打1p相当于直接退向听，是大恶手。这种二度进张如果进了2p这个34p的两面搭子就会被<strong>激活</strong>，因此也不要<strong>不分场合</strong>的过度排斥这种型。序盘应该早点将单个字牌中打掉，特别是场上已损一张的情况下，乱留安牌会极大影响做牌效率。</p><h3 id="2-向听乱退不可取"><a href="#2-向听乱退不可取" class="headerlink" title="2.向听乱退不可取"></a>2.向听乱退不可取</h3><h4 id="a-我的好型病犯了"><a href="#a-我的好型病犯了" class="headerlink" title="a.我的好型病犯了"></a>a.我的好型病犯了</h4><p><img src="/2021/03/02/日本麻雀笔记/好型病01.png" alt=""></p><p>这个牌看起来很复杂，主要是有一个<strong>万子的连续型</strong>。这时千万不能<strong>“好型病”</strong>犯了，把2、4s拆了，这会直接导致退向听，是一个大大的恶手。其实万子可以看成23456的三面两个搭子和678一个成型面子，缺少雀头，因此这里很明显只有切4p和中两手选择，其实选择余地不大。这种随意手其实很常见，不要以为2345算23+45两个搭子，拆一个嵌张搭子向听肯定不变，其实这里很明显拆嵌张搭子是退向听的。</p><h3 id="3-搭子超载了"><a href="#3-搭子超载了" class="headerlink" title="3.搭子超载了"></a>3.搭子超载了</h3><h4 id="a-我想贪宝牌"><a href="#a-我想贪宝牌" class="headerlink" title="a.我想贪宝牌"></a>a.我想贪宝牌</h4><p><img src="/2021/03/02/日本麻雀笔记/我想贪宝牌.png" alt=""></p><p>这里有点意思，微差二择，此处搭子确实超载了，拆了12边张搭子和77双碰有效进张都不变，向听数也会保持不变，而且3m和7m都不是很容易被别家打出。一般有一个结论就是<strong>保持两个对子时效率最高</strong>，此处也的确如此，两个对子可以更方便作面子替补。而且一向听最好关注一下听牌型，如果拆了77m，4p雀头就相当于固定了，因此最后听牌时如果进了第三张宝牌就留不住；留77m和44p双碰进了4p也可以好型听牌，此处留下77m比较好，当然也要关注一下场况，两边厚薄程度有所不同也可以辅助判断。</p><h4 id="b-一向听微差二择"><a href="#b-一向听微差二择" class="headerlink" title="b.一向听微差二择"></a>b.一向听微差二择</h4><p><img src="/2021/03/02/日本麻雀笔记/一向听微差二择.png" alt=""></p><p>如图是一个一向听牌型，打48m和25s进张数都相同，但是这里面差别挺大。</p><p>首先考虑赤牌麻将中，你打了4m就会丢失0m的近张，况且中间的牌变化更多，所以从牌理上来说4、8m选一个切掉肯定先切8m，可能8m唯一的优势就在于安全度比较高了吧(笑)。同样的，且5s有机会一杯口，一般情况下大于切2s价值。4连型是一个比较灵活的型，两边可以做雀头。从一向听到听牌我们考虑一下听牌型如何。</p><p>打8m：进5m后打5s会形成好型一杯口可能；进9p打3s形成嵌5m听牌；进1s打5s形成嵌5m听牌；进2s打3s形成嵌5m听牌；进4s打5s形成一杯口确定的嵌5m听牌；可以看到15枚里只有4枚能够好型听牌；</p><p>打5s：进5或7m可以好型听牌，良型率53.3%。</p><p>可以知道，留下连坎型搭子最后的好型率是比这种连续型的高的。</p><h3 id="4-切浮牌"><a href="#4-切浮牌" class="headerlink" title="4.切浮牌"></a>4.切浮牌</h3><p><img src="/2021/03/02/日本麻雀笔记/切浮牌01.png" alt=""></p><p>只有两张牌切出去向听数不变，但此处一定是切1s。主要有一个很讨厌的型，间四型2457，这种型向听数早的时候可以留，特别是有27双碰进张，有时候可以凑一个雀头，但这种型很容易振听。一向听时就难过了，向听前进时听牌必是嵌张听牌，这时留的5s进3467都可以拆掉间四型变为好型听牌，所以是关键，除此之外，进8m也可以改良为好型，需要注意。</p><h2 id="三、鸣牌"><a href="#三、鸣牌" class="headerlink" title="三、鸣牌"></a>三、鸣牌</h2><h3 id="1-感觉来不及了！"><a href="#1-感觉来不及了！" class="headerlink" title="1.感觉来不及了！"></a>1.感觉来不及了！</h3><p><img src="/2021/03/02/日本麻雀笔记/鸣牌食断01.jpg" alt=""></p><p>要有速度意识，现在是第十巡了，手牌<strong>断幺dora2</strong>能鸣牌就鸣牌吧，平均和了巡数12巡左右，10巡差不多要听牌了，而且即使要门前清，这牌也可能听7m和宝4p双碰，胡率也不高，不如早点食断还有机会自摸。</p><h2 id="四、防守"><a href="#四、防守" class="headerlink" title="四、防守"></a>四、防守</h2><h3 id="1-这牌还有必要兜么？"><a href="#1-这牌还有必要兜么？" class="headerlink" title="1.这牌还有必要兜么？"></a>1.这牌还有必要兜么？</h3><p><img src="/2021/03/02/日本麻雀笔记/这牌还有必要兜么.jpg" alt=""></p><p><img src="/2021/03/02/日本麻雀笔记/这牌还有必要兜么.png" alt=""></p><p>这牌是两向听，而且边、坎张太多了，进张太少了，可以直接打3m斩断残念——<strong>全弃</strong>。全弃一定要从3m开始切，因为以后可能是一张铳牌，这牌还能铳就很难受了，注意<strong>烂牌坚决不铳，好牌合理进攻</strong>。这也称为<strong>穴熊战术</strong>，把中间的牌开始啪啪往外打，存储安全牌，看到危险就可以龟缩防守了(滑稽)。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>娱乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>娱乐</tag>
      
      <tag>麻将</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PAT Basic Practice</title>
    <link href="/2021/02/14/PAT-Basic-Practice/"/>
    <url>/2021/02/14/PAT-Basic-Practice/</url>
    
    <content type="html"><![CDATA[<h2 id="1001-害死人不偿命的-3n-1-猜想-15-分"><a href="#1001-害死人不偿命的-3n-1-猜想-15-分" class="headerlink" title="1001 害死人不偿命的(3n+1)猜想 (15 分)"></a><strong>1001 害死人不偿命的(3n+1)猜想 (15 分)</strong></h2><p>卡拉兹(Callatz)猜想：</p><p>对任何一个正整数 <em>n</em>，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3<em>n</em>+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 <em>n</em>=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3<em>n</em>+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……</p><p>我们今天的题目不是证明卡拉兹猜想，而是对给定的任一不超过 1000 的正整数 <em>n</em>，简单地数一下，需要多少步（砍几下）才能得到 <em>n</em>=1？</p><p><strong>输入格式：</strong></p><p>每个测试输入包含 1 个测试用例，即给出正整数 <em>n</em> 的值。</p><p><strong>输出格式：</strong></p><p>输出从 <em>n</em> 计算到 1 需要的步数。</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs in">3<br></code></pre></div></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs out">5<br></code></pre></div></td></tr></table></figure><p><strong>解析</strong>：快乐模拟就行，直接按题给算法写。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-keyword">while</span>(num != <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>            count++;<br>            num /= <span class="hljs-number">2</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            count++;<br>            num = (<span class="hljs-number">3</span> * num + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, count);<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1002-写出这个数-20-分"><a href="#1002-写出这个数-20-分" class="headerlink" title="1002 写出这个数 (20 分)"></a>1002 写出这个数 (20 分)</h2><p>读入一个正整数 <em>n</em>，计算其各位数字之和，用汉语拼音写出和的每一位数字。</p><p><strong>输入格式：</strong></p><p>每个测试输入包含 1 个测试用例，即给出自然数 <em>n</em> 的值。这里保证 <em>n</em> 小于 10100。</p><p><strong>输出格式：</strong></p><p>在一行内输出 <em>n</em> 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs in">1234567890987654321123456789<br></code></pre></div></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs out">yi san wu<br></code></pre></div></td></tr></table></figure><p><strong>解析：</strong>输入样例过大，应该<strong>当做字符串处理</strong>。先求出串每个数位总和total，然后用数组记录每个数位的值并逆序输出每位读音即可，最后一位后面不输出空格。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">char</span> str[<span class="hljs-number">101</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br><span class="hljs-keyword">char</span> numbit[<span class="hljs-number">4</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br><span class="hljs-keyword">int</span> total = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br><span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++)&#123;<br>    total += str[i] - <span class="hljs-number">48</span>;<br>&#125;<br><span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(total != <span class="hljs-number">0</span>)&#123;<br>numbit[j] = total % <span class="hljs-number">10</span>;<br>total /= <span class="hljs-number">10</span>;<br>j++; <br>&#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k; k &lt; j; k++)&#123;<br>    <span class="hljs-keyword">switch</span>(numbit[j - k - <span class="hljs-number">1</span>])&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;yi&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;er&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;san&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;si&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wu&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;liu&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;qi&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ba&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jiu&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ling&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(k != j - <span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="1003-我要通过！-20-分"><a href="#1003-我要通过！-20-分" class="headerlink" title="1003 我要通过！ (20 分)"></a><strong>1003 我要通过！ (20 分)</strong></h2><p><strong>答案正确</strong>”是自动判题系统给出的最令人欢喜的回复。本题属于 PAT 的“<strong>答案正确</strong>”大派送 —— 只要读入的字符串满足下列条件，系统就输出“<strong>答案正确</strong>”，否则输出“<strong>答案错误</strong>”。</p><p>得到“<strong>答案正确</strong>”的条件是：</p><ol><li>字符串中必须仅有 <code>P</code>、 <code>A</code>、 <code>T</code>这三种字符，不可以包含其它字符；</li><li>任意形如 <code>xPATx</code> 的字符串都可以获得“<strong>答案正确</strong>”，其中 <code>x</code> 或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串；</li><li>如果 <code>aPbTc</code> 是正确的，那么 <code>aPbATca</code> 也是正确的，其中 <code>a</code>、 <code>b</code>、 <code>c</code> 均或者是空字符串，或者是仅由字母 <code>A</code> 组成的字符串。</li></ol><p>现在就请你为 PAT 写一个自动裁判程序，判定哪些字符串是可以获得“<strong>答案正确</strong>”的。</p><p><u><strong>输入格式：</strong></u></p><p>每个测试输入包含 1 个测试用例。第 1 行给出一个正整数 <em>n</em> (&lt;10)，是需要检测的字符串个数。接下来每个字符串占一行，字符串长度不超过 100，且不包含空格。</p><p><u><strong>输出格式：</strong></u></p><p>每个字符串的检测结果占一行，如果该字符串可以获得“<strong>答案正确</strong>”，则输出 <code>YES</code>，否则输出 <code>NO</code>。</p><p><u><strong>输入样例：</strong></u></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs in">8<br>PAT<br>PAAT<br>AAPATAA<br>AAPAATAAAA<br>xPATx<br>PT<br>Whatever<br>APAAATAA<br></code></pre></div></td></tr></table></figure><p><u><strong>输出样例：</strong></u></p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs out">YES<br>YES<br>YES<br>YES<br>NO<br>NO<br>NO<br>NO<br></code></pre></div></td></tr></table></figure><p><strong>解析</strong>：如果P和T字母将待测串分成三个部分a、b、c串(a、b、c为串长)，正确的型其实就两种，一种是前后a、c串长度相等(可以为0)，b=1；另一种是b = 2， c = 2a，以及之后递推得到的关系式；这些情况可以合并为一种等式关系，就是<strong>c = b * a</strong>。此外还要注意P、A、T三个字母都<strong>至少要出现一次</strong>，且<strong>P必须在T之前</strong>出现，所以有如下代码。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> num;<br>    <span class="hljs-keyword">int</span> flagP, flagA, flagT;<br>    <span class="hljs-keyword">int</span> stra, strb, strc;<br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">100</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;num);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; num; i++)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>        flagP = <span class="hljs-number">0</span>;<br>        flagA = <span class="hljs-number">0</span>;<br>        flagT = <span class="hljs-number">0</span>;<br>        stra = strb = strc = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">100</span> &amp;&amp; str[j] != <span class="hljs-string">&#x27;\0&#x27;</span>; j++)&#123;<br>            <span class="hljs-keyword">if</span>(str[j] == <span class="hljs-string">&#x27;P&#x27;</span>)<br>                flagP ++;<br>            <span class="hljs-keyword">if</span>(str[j] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>                flagA ++;<br>            <span class="hljs-keyword">if</span>(str[j] == <span class="hljs-string">&#x27;T&#x27;</span>)<br>                flagT ++;<br>            <span class="hljs-keyword">if</span>(flagP == <span class="hljs-number">0</span> &amp;&amp; flagT == <span class="hljs-number">0</span> &amp;&amp; str[j] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>                stra++;<br>            <span class="hljs-keyword">if</span>(flagP == <span class="hljs-number">1</span> &amp;&amp; flagT == <span class="hljs-number">0</span> &amp;&amp; str[j] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>                strb++;<br>            <span class="hljs-keyword">if</span>(flagP == <span class="hljs-number">1</span> &amp;&amp; flagT == <span class="hljs-number">1</span> &amp;&amp; str[j] == <span class="hljs-string">&#x27;A&#x27;</span>)<br>                strc++;<br>            <span class="hljs-keyword">if</span>(flagP == <span class="hljs-number">0</span> &amp;&amp; flagT &gt;= <span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span>(str[j] != <span class="hljs-string">&#x27;P&#x27;</span> &amp;&amp; str[j] != <span class="hljs-string">&#x27;A&#x27;</span> &amp;&amp; str[j] != <span class="hljs-string">&#x27;T&#x27;</span>)&#123;<br>                flagP = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flagP == <span class="hljs-number">1</span> &amp;&amp; flagA &gt;= <span class="hljs-number">1</span> &amp;&amp; flagT == <span class="hljs-number">1</span> )&#123;<br>            <span class="hljs-keyword">if</span>(strc == strb * stra)<br>a[i] = <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; num; k++)&#123;<br>        <span class="hljs-keyword">if</span>(a[k] == <span class="hljs-number">0</span>)<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NO\n&quot;</span>);<br>        <span class="hljs-keyword">else</span><br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;YES\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>OJ练习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C与C++的若干易遗忘点</title>
    <link href="/2021/02/08/C%E4%B8%8EC++%E7%9A%84%E8%8B%A5%E5%B9%B2%E6%98%93%E9%81%97%E5%BF%98%E7%82%B9/"/>
    <url>/2021/02/08/C%E4%B8%8EC++%E7%9A%84%E8%8B%A5%E5%B9%B2%E6%98%93%E9%81%97%E5%BF%98%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<ol><li><p>看码一遍不如手敲一遍，手敲一遍不如理解一遍。</p></li><li><p>不要在程序中混用cin和scanf、cout与printf有时会出问题。</p></li><li><p>变量名第一个字符必须是<strong>字母</strong>或者<strong>下划线</strong>，除了第一个字符以外的其他字符必须是<strong>字母、数字</strong>或<strong>下划线</strong>。</p></li><li><p>如果long long型赋大于2^31-1的初值，需要在初值后面加上LL否则会编译错误。</p></li><li><p>ASCII码的范围是0~127，<strong>小写字母比大写字母的ASCII码值大32</strong>。0~9、A~Z、a~z的ASCII码值为48~57、65~90、97~122.</p></li><li><p>字符常量一定是<strong>单个字符</strong>，需要用<strong>单引号</strong>标出来。</p></li><li><p>转义字符\n代表换行；\0代表空字符NULL，其ASCII码值为0；空格(Space)的ASCII码值为32。</p></li><li><p>字符串常量可以作为初值赋值给字符数组，并用%s的格式输出；不能将字符串常量赋值给字符变量。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;I Love You.&quot;</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>定义常量的两种方法</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> e 2.718         <span class="hljs-comment">//符号常量</span></span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">double</span> e = <span class="hljs-number">2.718</span>; <span class="hljs-comment">//const常量</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>宏定义</strong>加法与两个数的MAX结构。由于宏定义是<strong>整体替换</strong>，为了保证运算顺序与结果符合我们的期望，每个变量外面都要加一个括号。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ADD(x, y) ((x) + (y))</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAX(x, y) ((x) &gt; (y) ? (a) : (b))</span><br></code></pre></div></td></tr></table></figure></li><li><p><strong>数组名本身代表这个数组第一个元素的地址</strong>，调用scanf函数时不用加&amp;。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">char</span> str[<span class="hljs-number">15</span>];<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br></code></pre></div></td></tr></table></figure></li><li><p>除了%c外，scanf对其他格式符（如%d、%s）的输入是以空白符(空格或换行等)为结束判断标志的，除非使用%c记录读入的空格，否则其他情况都会自动跳过空格。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">int</span> a, b;<br>    <span class="hljs-keyword">char</span> c;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d%c%s&quot;</span>, &amp;a, &amp;b, &amp;c, str);    <span class="hljs-comment">//输入：2 5 Zai(p.s.:2、5虽然隔开但两个%d之间可不加空格)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a=%d,b=%d,c=%c,str=%s&quot;</span>, a, b, c, str); <span class="hljs-comment">//结果：a=2,b=5,c= ,str=zai</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>printf和scanf的格式符基本一样，除了数据类型double，前者为%f后者为%lf。</p></li><li><p>常见输出格式</p><p>(1)%.mf ：让浮点数保留m位小数输出（规则为四舍六入五成双）</p><p>(2)%md ：以m位进行对齐输出，高位用空格填充。</p><p>(3)%0md ：以m位进行对齐输出，高位用0填充。</p></li><li><p>getchar和putchar用来输入和输出键盘上键入的<strong>单个字符</strong>，getchar可以识别空白符（换行符及空格）。</p></li><li><p>常用math函数</p><p>(1)绝对值函数：fabs(double x)</p><p>(2)向下取整及向上取整函数：floor(double x)和ceil(double x)</p><p>(3)幂函数：pow(double r, double x)</p><p>(4)算术平方根函数：sqrt(double x)</p><p>(5)以<strong>自然对数为底</strong>的对数函数：log(double x)</p><p>(6)三角函数（单位<strong>弧度制</strong>）：sin(double x)、cos(double x)、tan(double x)</p><p>(7)四舍五入函数：round(double x)</p></li><li><p>switch语句：分支条件较多时比较适用</p><p>case间不加break，则会按由上至下的顺序依次执行语句</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量表达式<span class="hljs-number">1</span>:<br>        ...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> 常量表达式<span class="hljs-number">2</span>:<br>        ...<br>        <span class="hljs-keyword">break</span>;<br>     .<br>     .<br>     .<br>    <span class="hljs-keyword">case</span> 常量表达式n:<br>        ...<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        ...<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>break和continue的区别：break跳过当前作用的整个循环，continue跳过当前循环的一轮。</p></li><li><p>C99支持数组大小下标定义时用变量，一般来说数组大小必须是整型常量。</p></li><li><p>memset函数（对数组中的每一个元素赋予相同的值，建议赋0或-1）</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;cstring&gt;</span></span><br><span class="hljs-built_in">memset</span>(数组名, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(数组名) )<br><span class="hljs-built_in">memset</span>(数组名, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span>(数组名) )<br></code></pre></div></td></tr></table></figure></li><li><p>字符数组允许直接<strong>赋值字符串</strong>来初始化，但<strong>其他位置不允许</strong>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//普通初始化</span><br><span class="hljs-keyword">char</span> str[<span class="hljs-number">15</span>] = &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br><span class="hljs-comment">//直接赋值字符串</span><br><span class="hljs-keyword">char</span> str[<span class="hljs-number">15</span>] = <span class="hljs-string">&quot;Hello&quot;</span>;<br></code></pre></div></td></tr></table></figure></li><li><p>gets输入字符串，puts输出字符串。gets以换行符\n作为输入结束标志，scanf完一个整数后，如果要使用gets需要先用getchar接收整数后的换行符，然后将其存放于一个一维数组中。puts将一维数组的内容在界面上输出，然后输出一个换行符。</p></li><li><p>每个一维数组的结尾都有一个<strong>空字符\0</strong>表示存放字符串的结尾。</p></li><li><p>常用的string函数。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">char</span> str1[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;Hi&quot;</span>;<br>    <span class="hljs-keyword">char</span> str2[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;nihao&quot;</span>;<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str1);        <span class="hljs-comment">// len = 2</span><br>    <span class="hljs-keyword">int</span> cmp = <span class="hljs-built_in">strcmp</span>(str1, str2);  <span class="hljs-comment">// cmp &lt; 0,说明前者字典序更小</span><br>    <span class="hljs-built_in">strcat</span>(str1, str2);            <span class="hljs-comment">// str1 = &quot;Hinihao&quot;</span><br>    <span class="hljs-built_in">strcpy</span>(str1, str2);            <span class="hljs-comment">// str1 = &quot;nihao&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>sscanf和sprintf处理字符串。前者作用是将字符数组str中的内容以”%d”的格式写到n中，后者则相反，是将n以”%d”的格式写到str字符数组中。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> n;<br>    <span class="hljs-keyword">char</span> str[<span class="hljs-number">10</span>] = <span class="hljs-string">&quot;250&quot;</span>;<br>    <span class="hljs-built_in">sscanf</span>(str, <span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);     <span class="hljs-comment">//输出250</span><br>    <span class="hljs-keyword">int</span> m = <span class="hljs-number">520</span>;<br>    <span class="hljs-built_in">sprintf</span>(str, <span class="hljs-string">&quot;%d&quot;</span>, m);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, str);   <span class="hljs-comment">//输出520</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>数组可以作函数参数，参数中数组第一维不用填写长度，二维数组需要填写第二维长度，函数调用时仅需填写数组名。<strong>数组传参时，函数内对数组的修改等同与对原数组元素的修改，这与一般值传递不同。</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">paraTran</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a[], <span class="hljs-keyword">int</span> b[][<span class="hljs-number">3</span>])</span></span>&#123;<br>    a[<span class="hljs-number">0</span>] = <span class="hljs-number">3</span>;<br>    a[<span class="hljs-number">1</span>] = <span class="hljs-number">2</span>;<br>    a[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    b[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br>    <span class="hljs-keyword">int</span> b[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br>    paraTran(a, b);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a[%d] = %d\n&quot;</span>, i, a[i]);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;b[%d][%d] = %d\n&quot;</span>, i, j, b[i][j]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>同时定义好几个同类型的指针变量，’ * ‘只会结合于第一个变量名。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">int</span>* p1, p2; <span class="hljs-comment">//p1为int*型、p2为int型</span><br></code></pre></div></td></tr></table></figure></li><li><p>对于int<em>类型的指针变量p来说，p+1是p所指int型变量的<em>*下一个int型变量</em></em>的地址，为4个Byte。</p><p>两个指针相减，等价于在求两个指针之间相差了几个<strong>基类型</strong>。</p></li><li><p>由于指针变量可以进行加减法，a+i等价于&amp;a[i]，*(a+i)等价于a[i]；</p></li><li><p>swap函数观察指针的作用</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span>* b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span> temp = *a;<br>    *a = *b;<br>    *b = temp;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p>C++<strong>引用</strong>实现地址交换达到交换两个变量的效果。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">//无法达到效果，因为main函数传入的是地址的副本</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* a, <span class="hljs-keyword">int</span> * b)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>* temp = a;<br>    a = b;<br>    b = temp;<br>&#125; <br><span class="hljs-comment">//可以达到效果,swap内对指针的修改能够返回main()</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* &amp;p1, <span class="hljs-keyword">int</span>* &amp;p2)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>* temp = p1;<br>    p1 = p2;<br>    p2 = temp;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>常量不可以引用</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>* &amp;p1, <span class="hljs-keyword">int</span>* &amp;p2)</span></span>&#123;<br>    <span class="hljs-keyword">int</span>* temp = p1;<br>    p1 = p2;<br>    p2 = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> *p1 = &amp;a, *p2 = &amp;b;<br>    swap(p1, p2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d\n&quot;</span>, *p1, *p2);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ol><ol><li><p>结构体的定义</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender; <span class="hljs-comment">//&#x27;F&#x27; or  &#x27;M&#x27;</span><br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> major[<span class="hljs-number">20</span>];<br>&#125;ZhangSan, stu[<span class="hljs-number">10</span>];<br><span class="hljs-comment">//等价于</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender; <span class="hljs-comment">//&#x27;F&#x27; or  &#x27;M&#x27;</span><br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> major[<span class="hljs-number">20</span>];<br>&#125;<br>studentInfo ZhangSan;<br>studentInfo stu[<span class="hljs-number">10</span>];<br></code></pre></div></td></tr></table></figure></li></ol><ol><li><p>结构体内部可以定义除自己本身外的任何数据类型，但可以定义自身类型的指针变量。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;<br><span class="hljs-comment">//通常也可以把结构体命名为Node，之后就不用加上struct了</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span>&#123;</span><br>    <span class="hljs-keyword">int</span> data;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Node</span> *<span class="hljs-title">next</span>;</span><br>&#125;Node;<br></code></pre></div></td></tr></table></figure></li><li><p>访问结构体内的元素</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender; <span class="hljs-comment">//&#x27;F&#x27; or  &#x27;M&#x27;</span><br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> major[<span class="hljs-number">20</span>];<br>    studentInfo* next;<br>&#125;ZhangSan, *p;<br><span class="hljs-comment">//访问学生张三的信息操作如下</span><br>ZhangSan.id<br>ZhangSan.name<br>ZhangSan.next<br><span class="hljs-comment">//访问p中元素的方法</span><br>(*p).id<br>(*p).name<br>(*p).next<br>p-&gt;id<br>p-&gt;name<br>p-&gt;next<br></code></pre></div></td></tr></table></figure></li><li><p>结构体的初始化与赋值</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender; <span class="hljs-comment">//&#x27;F&#x27; or  &#x27;M&#x27;</span><br>    <span class="hljs-keyword">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">char</span> major[<span class="hljs-number">20</span>];<br>    studentInfo* next;<br>&#125;ZhangSan, *p;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">/*可以单独赋值如ZhangSan.id = 1，但字符数组除了初始化</span><br><span class="hljs-comment">    外不能直接赋字符串，如ZhangSan.major = &quot;math&quot;*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span> <span class="hljs-title">ZhangSan</span> =</span> &#123;<span class="hljs-number">20211289</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <br><span class="hljs-string">&quot;ZhangSan&quot;</span>, <span class="hljs-string">&quot;Material Science&quot;</span>&#125;;  <br><span class="hljs-keyword">char</span> str[<span class="hljs-number">20</span>] = &#123;<span class="hljs-string">&#x27;0&#x27;</span>&#125;;  <span class="hljs-comment">//不可以直接赋右值ZhangSan.major</span><br><span class="hljs-built_in">strcpy</span>(str, ZhangSan.major);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>, str);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %s&quot;</span>, &amp;ZhangSan.id, &amp;ZhangSan.name);<span class="hljs-comment">//支持读入时赋值</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;id = %d name = %s&quot;</span>, ZhangSan.id, ZhangSan.name);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>利用生成的<strong>构造函数</strong>进行初始化与赋值。</li></ol><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender;<br>    <span class="hljs-comment">//默认生成的构造函数</span><br>    studentInfo()&#123;&#125;<br>&#125;;<br><span class="hljs-comment">/*-----------------------*/</span><br><span class="hljs-comment">//如果要手动提供id和gender的初始化参数</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender;<br>    <span class="hljs-comment">//填写如下的参数用以对结构体的内部变量赋值</span><br>    studentInfo(<span class="hljs-keyword">int</span> _id, <span class="hljs-keyword">char</span> _gender)&#123;<br>        <span class="hljs-comment">//赋值</span><br>        id = _id;<br>        gender = _gender;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*----------------------*/</span><br><span class="hljs-comment">//自定义构造函数简化</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender;<br>    studentInfo(<span class="hljs-keyword">int</span> _id, <span class="hljs-keyword">char</span> _gender): id(_id), gender(_gender)&#123;&#125;<br>&#125;<br><span class="hljs-comment">/*----------------------*/</span><br><span class="hljs-comment">//构造函数定义完毕后对结构体变量的赋值</span><br>studentInfo stu = studentInfo(<span class="hljs-number">20211289</span>, <span class="hljs-string">&#x27;M&#x27;</span>);<br></code></pre></div></td></tr></table></figure><p><strong>若自己重新定义了构造函数，则不能不经过初始化就定义结构体变量。</strong>此时studentInfo(){}被自己定义的构造函数覆盖，可以把其重新加上，多个构造函数可以并存，这样更能适应不同的场合。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">studentInfo</span>&#123;</span><br>    <span class="hljs-keyword">int</span> id;<br>    <span class="hljs-keyword">char</span> gender;<br>    <span class="hljs-comment">//用以不用初始化就定义结构体变量；</span><br>    studentInfo()&#123;&#125;<br>    <span class="hljs-comment">//只初始化gender参数</span><br>    studentInfo(<span class="hljs-keyword">char</span> _gender)&#123;<br>        gender = _gender;<br>    &#125;<br>    <span class="hljs-comment">//同时初始化所有参数</span><br>    studentInfo(<span class="hljs-keyword">int</span> _id, <span class="hljs-keyword">char</span> _gender)&#123;<br>        id = _id;<br>        gender = _gender;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span>&#123;</span><br>    <span class="hljs-keyword">int</span> x, y;<br>    Point()&#123;&#125;   <span class="hljs-comment">//这样可以不经过初始化就定义pt[10]</span><br>    Point(<span class="hljs-keyword">int</span> _x, <span class="hljs-keyword">int</span> _y): x(_x), y(_y) &#123;&#125; <span class="hljs-comment">//用以提供x和y的初始化</span><br>&#125;pt[<span class="hljs-number">10</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++)&#123;<br>            pt[num++] = Point(i, j); <span class="hljs-comment">//直接使用构造函数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; num; k++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;(%d, %d)&quot;</span>, pt[k].x, pt[k].y);<br>        <span class="hljs-keyword">if</span>((k+<span class="hljs-number">1</span>) % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>38.getline函数读入一整行。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">char</span> str[<span class="hljs-number">100</span>];<br>getline(<span class="hljs-built_in">cin</span>, str);<br><span class="hljs-comment">//如果是string容器</span><br><span class="hljs-built_in">string</span> str;<br>getline(<span class="hljs-built_in">cin</span>, str);<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>C语言</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>语言</tag>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2021/02/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2021/02/07/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="1-冒泡排序-BubbleSort"><a href="#1-冒泡排序-BubbleSort" class="headerlink" title="1.冒泡排序(BubbleSort)"></a>1.冒泡排序(BubbleSort)</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> *b)</span></span>&#123;          <br><span class="hljs-keyword">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> n)</span></span>&#123;    <br><span class="hljs-keyword">bool</span> flag;                     <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)&#123;  <br>flag = <span class="hljs-literal">false</span>;               <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = n<span class="hljs-number">-1</span>; j &gt; i; j--)&#123;<br><span class="hljs-keyword">if</span>(A[j<span class="hljs-number">-1</span>] &gt; A[j])&#123;     <br>swap(&amp;A[j<span class="hljs-number">-1</span>], &amp;A[j]);<br>flag = <span class="hljs-literal">true</span>;<br>&#125;                      <br><span class="hljs-keyword">if</span>(flag = <span class="hljs-literal">false</span>)&#123;      <br><span class="hljs-keyword">return</span> ;           <br>&#125;<br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">3</span>, <span class="hljs-number">6</span>&#125;;    <br><span class="hljs-keyword">int</span> lenth = <span class="hljs-keyword">sizeof</span>(A)/<span class="hljs-keyword">sizeof</span>(A[<span class="hljs-number">0</span>]); <br>BubbleSort(A, lenth);                <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lenth; i++)&#123;     <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A[%d] = %d\n&quot;</span>, i, A[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="2-简单选择排序-SelectSort"><a href="#2-简单选择排序-SelectSort" class="headerlink" title="2.简单选择排序(SelectSort)"></a>2.简单选择排序(SelectSort)</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> *b)</span></span>&#123;              <br><span class="hljs-keyword">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SelectSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> n)</span></span>&#123;       <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n<span class="hljs-number">-1</span>; i++)&#123;       <br><span class="hljs-keyword">int</span> min = i;                   <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; n; j++)&#123;<br><span class="hljs-keyword">if</span>(A[j] &lt; A[min])&#123;          <br>min = j;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(min != i)&#123;                  <br>swap(&amp;A[min], &amp;A[i]);      <br>&#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">3</span>, <span class="hljs-number">6</span>&#125;;    <br><span class="hljs-keyword">int</span> lenth = <span class="hljs-keyword">sizeof</span>(A)/<span class="hljs-keyword">sizeof</span>(A[<span class="hljs-number">0</span>]); <br>SelectSort(A, lenth);                <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lenth; i++)&#123;     <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A[%d] = %d\n&quot;</span>, i, A[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="3-插入排序-InsertSort"><a href="#3-插入排序-InsertSort" class="headerlink" title="3.插入排序(InsertSort)"></a>3.插入排序(InsertSort)</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> *b)</span></span>&#123;              <br><span class="hljs-keyword">int</span> temp = *a;<br>*a = *b;<br>*b = temp;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> n)</span></span>&#123;       <br><span class="hljs-keyword">int</span> i, j;<br><span class="hljs-keyword">for</span>(i = <span class="hljs-number">1</span>; i &lt; n; i++)&#123;            <br>    <span class="hljs-keyword">if</span>(A[i] &lt; A[i<span class="hljs-number">-1</span>])&#123;              <br>    <span class="hljs-keyword">int</span> boundary = A[i];       <br>    <span class="hljs-keyword">int</span> temp = A[i];           <br>    <span class="hljs-keyword">for</span>(j = i; boundary &lt; A[j<span class="hljs-number">-1</span>]; j--)&#123;   <br>                A[j] = A[j - <span class="hljs-number">1</span>];    <br>&#125;<br>A[j] = temp;    <br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">3</span>, <span class="hljs-number">6</span>&#125;;    <br><span class="hljs-keyword">int</span> lenth = <span class="hljs-keyword">sizeof</span>(A)/<span class="hljs-keyword">sizeof</span>(A[<span class="hljs-number">0</span>]); <br>InsertSort(A, lenth);               <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lenth; i++)&#123;     <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A[%d] = %d\n&quot;</span>, i, A[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="4-归并排序-MergeSort"><a href="#4-归并排序-MergeSort" class="headerlink" title="4.归并排序(MergeSort)"></a>4.归并排序(MergeSort)</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">int</span> *B = (<span class="hljs-keyword">int</span> *)<span class="hljs-built_in">malloc</span>((<span class="hljs-number">10</span>)*<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>));<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> mid, <span class="hljs-keyword">int</span> high)</span></span>&#123;<br><span class="hljs-keyword">int</span> k, i, j;<br><br><span class="hljs-keyword">for</span>(k = low; k &lt;= high; k++)&#123;<br>B[k] = A[k];<br>&#125;<br><span class="hljs-keyword">for</span>(i = low, j = mid+<span class="hljs-number">1</span>, k = i; i &lt;= mid &amp;&amp; j &lt;= high; k++)&#123;<br><span class="hljs-keyword">if</span>(B[i] &lt;= B[j])&#123;<br>A[k] = B[i++];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>A[k] = B[j++];<br>&#125;<br>&#125;<span class="hljs-comment">//for</span><br><span class="hljs-keyword">while</span>(i &lt;= mid)<br>    A[k++] = B[i++];<br><span class="hljs-keyword">while</span>(j &lt;= high)<br>    A[k++] = B[j++];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">MergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span> A[], <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span></span>&#123;<br><span class="hljs-keyword">if</span>(low &lt; high)&#123;<br><span class="hljs-keyword">int</span> mid = (low + high)/<span class="hljs-number">2</span>;<br>MergeSort(A, low, mid);<br>MergeSort(A, mid+<span class="hljs-number">1</span>, high);<br>Merge(A, low, mid, high);<br>&#125;<span class="hljs-comment">//if</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> A[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">0</span> ,<span class="hljs-number">3</span>, <span class="hljs-number">6</span>&#125;;    <br><span class="hljs-keyword">int</span> lenth = <span class="hljs-keyword">sizeof</span>(A)/<span class="hljs-keyword">sizeof</span>(A[<span class="hljs-number">0</span>]); <br>MergeSort(A, <span class="hljs-number">0</span>, lenth<span class="hljs-number">-1</span>);           <br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; lenth; i++)&#123;    <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A[%d] = %d\n&quot;</span>, i, A[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>C</tag>
      
      <tag>C++</tag>
      
      <tag>排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>心灵奇旅</title>
    <link href="/2021/02/05/%E5%BF%83%E7%81%B5%E5%A5%87%E6%97%85/"/>
    <url>/2021/02/05/%E5%BF%83%E7%81%B5%E5%A5%87%E6%97%85/</url>
    
    <content type="html"><![CDATA[<p>剧透警告<a id="more"></a></p><p>Gardner是一名酷爱JAZZ的中学钢琴音乐教师，受父亲的影响，他也致力于进行一场完美的演奏，并为之不断努力着。但他母亲因为了解了梦想难以养活自己而对Gardner的梦想持怀疑态度，但是痴迷钢琴到忘我地步的Gardner最终还是争取到了一次演奏团的机会。他欣喜若狂，跑遍城市的大街小巷，仿佛想让全世界都知道自己的好消息。乐极生悲，Gardner没注意路况不小心掉入了城市中正在维护的下水道井口中，坠入了一个异次元。</p><p>异次元是通往往生的一条狭长大道，Gardner因为未尽其志，不甘心就这么离世于是从周边跳了下去，来到了灵魂的前生聚集地，当然，此举也打破了以往的平衡，被负责计数的计数君发觉了。前生中有很多灵魂，仅仅在他们真正做好准备去生存时，他们才能获得“地球标签”从地球传送门跳下去到达人间，这个过程也有很多进行有困难的灵魂，因此G被分配作为“导师”去指导这些灵魂取得对生活的渴望。主角分配到的是最难缠的“22号”，22在这个基地几千年了也没能取得对生活的渴望，几近自暴自弃。两人交流了一段时间，22对主角的艰难遭遇深表同情，带领G由一条密道抵达了一个神秘区域。这里连通现实与里世界，存在着迷失的灵魂和忘我的生灵，神秘船长用特殊方法带领他们返回了现世。但阴差阳错，两人灵魂进错位置，22进入了主角的身体，主角进入了猫的身体。两人跌跌撞撞偷跑出了医院，在现实世界中，22体会到了食物的美味、体会到了社交的糖果甜、体会到了艺人触及灵魂的美妙音乐、体会到了学生对音乐的深爱、体会到了叶繁叶落的自然规律……22重新找回了对生活的渴望。于是现实中神秘船长帮助下正准备交换两人身体时，22跑去寻找生命的意义了，在薄弱环节时计数君将他们抓回了异世界。</p><p>二者被抓回去还在不断争吵，但神奇的是22的”地球标签”形成了。但Gardner认为22是进入了他的身体才会产生这种情感，而且他所领悟的不过是平常的生活，并不是真的产生了生命的”火花”。此时22也迷茫了，而且自己连累G被抓回来也很内疚，就将自己新标签送给了G，G也如愿以偿的返回了地球，参加了大合奏。但合奏完美结束后，G感到一阵空虚与迷茫，他本以为进行完大演奏后，自己的人生会有什么翻天覆地的大事变，可是现实是并没有什么变化。乐团主唱安慰他说，“鱼儿说自己希望游进海洋，但是没意识到自己已经在水里啊”，并期待明天G的表演。G回到家中忘我的弹起钢琴，于是又回到了神秘地，此时他在寻找22，他知道迷茫的22可能出了危险。22果然变成了迷失的灵魂，自卑、迷茫、自暴自弃使他自己被心结所缚，G将22搜集到的人家的落叶递给了他，似乎驱散了22内心的阴霾，22从迷失的灵魂中被解脱出来了。鉴于G帮助一个顽固派22找回了生活的渴望，异世界的管理者一致认为G应该重返现实，并且帮助他骗过了计数君，至此，故事结束。</p><p>我们每个人都在追寻生命的意义上从未停止脚步，可能在当下的时间节点，有些人迷茫，不知如何继续，有些人怀揣梦想负重前行。但我们可能从未想过，那些宏伟梦想本身也只是平常生活的一部分，无论达成与否，生命都还在继续，都将要继续。其实，生命的意义就是活着，过好精彩的每一天，做到这点就已经赋予了生命足够的意义。虽然有些事情能将意义的尺度扩展到永恒，但毫无疑问，活着本身就赋予了你所做的一切难以言说的意义，很多事情因为我们活着才有意义。立足于当下每一天，我们一直都是那条“水里的鱼”，从来没有毫无意义的人生，为了梦想而激发的驱动力是为了更好的指引我们走向诗和远方。</p><p><img src="/2021/02/05/心灵奇旅/lifemean.jpg" alt="美好的每一天"></p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>影评</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
      <tag>思考</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github Actions自动部署Hexo小白教程</title>
    <link href="/2021/01/31/%E4%BD%BF%E7%94%A8Github-Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/"/>
    <url>/2021/01/31/%E4%BD%BF%E7%94%A8Github-Actions%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2Hexo%E5%B0%8F%E7%99%BD%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>使用Github page + Hexo可以很方便的搭建博客，写博客。一般将hexo源文件存储在一个仓库的一个分支，而hexo产生的静态页面放在另一个分支，例如master分支，在Github page上选择以master分支为源展示页面。不过这产生了一个问题，一个完整的流程是<a id="more"></a>先<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>部署到github仓库的master分支，再将hexo源文件使用如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git add .<br>git commit -m &quot;备注信息……&quot;<br>git push origin fluid(源文件所在分支名，我这里是fluid分支)<br></code></pre></div></td></tr></table></figure><p>推送到仓库，这就显得过程比较繁琐复杂。<code>Github actions</code>提供了一种方便的方法，我们仅仅需要执行上述第二步，将源文件推送到Github Page的fluid分支上，当Github Actions 识别到我们有推送行为，就会将源文件自动部署到master分支上，减少了一半的工作量，让我们更专注于博客写作而不是调试博客系统。下面叙述一下Github Actions实现这一功能的配置步骤。</p><h2 id="获取访问秘钥"><a href="#获取访问秘钥" class="headerlink" title="获取访问秘钥"></a>获取访问秘钥</h2><p>如果之前能正常使用<code>hexo d</code>推送，这步应该已经完成，可以视情况跳过。</p><p>在本地库的hexo文件夹下使用git bash打开命令窗口，输入</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git config --global user.name &quot;你的github名字&quot;<br>git config --global user.email &quot;你的github邮箱&quot;<br></code></pre></div></td></tr></table></figure><p>之后输入指令生成SSH的公钥和私钥</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">ssh-keygen -t rsa -C &quot;你的github邮箱&quot;<br></code></pre></div></td></tr></table></figure><p>输入以下代码后一直按回车确认，直到代码执行完毕，在<code>/c/Users/你当前的windows用户名/.ssh文件夹</code>可以找到生成的公钥和私钥(有时Win系统Users文件夹会显示为中文的“用户”)，然后里面的两个文件分别为<code>id_rsa(私钥) 和 id_rsa.pub(公钥)</code>，同时在本地库的<code>.gitignore</code>文件中把公钥和私钥的<strong>文件名</strong>加进去，防止误操作将秘钥泄露到github远程库。</p><p>打开github，在头像下面点击<code>settings</code>，再点击<code>SSH and GPG keys</code>，新建一个SSH，名字随意，将<strong>公钥文件</strong>内所有内容粘贴到框内。在git bash中输入<code>ssh -T git@github.com</code>，下面出现你的用户名说明已经核验成功。(p.s.：SSH keys是最高权限的用户公钥，仅仅管理Github的Hexo仓库的话，<code>Setting -&gt; Deploy keys</code>单独设置deploy keys也可以达到同样的效果。)然后在Hexo文件所在Github仓库中<code>Settings -&gt; Secrets -&gt; Add a new secret</code>页面上创建一个新的<strong>私钥文件</strong>，名字随意但是要记下来，等下配置actions时有用，默认<code>Name</code>为<code>ACTIONS_DEPLOY_KEY</code>，将<code>id_rsa(私钥)</code>文件中的所有内容粘贴进去。</p><h2 id="配置Github-Actions"><a href="#配置Github-Actions" class="headerlink" title="配置Github Actions"></a>配置Github Actions</h2><h3 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h3><p>在本地库中新建文件，目录结构为<code>.github/workflows/CI.yml</code>,总共三个文件。</p><h3 id="配置CI的YAML文件"><a href="#配置CI的YAML文件" class="headerlink" title="配置CI的YAML文件"></a>配置CI的YAML文件</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">fluid</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">查询分支</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;10.x&#x27;</span><br>    <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">安装Hexo依赖</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-string">-g</span><br>          <span class="hljs-string">npm</span> <span class="hljs-string">install</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">清除Hexo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">heowc/action-hexo@main</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">args:</span> <span class="hljs-string">clean</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">生成Hexo</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">heowc/action-hexo@main</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">args:</span> <span class="hljs-string">generate</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">部署到master分支</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">peaceiris/actions-gh-pages@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">deploy_token:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.ACTIONS_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">external_repository:</span> <span class="hljs-string">你的github名称/你的github名称.github.io</span><br>          <span class="hljs-attr">publish_branch:</span> <span class="hljs-string">master</span><br>          <span class="hljs-attr">publish_dir:</span> <span class="hljs-string">./public</span><br></code></pre></div></td></tr></table></figure><h3 id="相关参数简述"><a href="#相关参数简述" class="headerlink" title="相关参数简述"></a>相关参数简述</h3><p>CI会在fluid分支中出现push时执行以下jobs。</p><p>环境运行在Ubuntu最新版本系统下，<code>actions/checkout@v2</code>组件会查询所在库的下拉菜单，识别到各个分支名称。</p><p>然后安装版本10.x的node.js，并安装hexo的依赖以及必备组件，这样github服务器上的完整运行环境就搭建起来了。</p><p>最后一步就是服务器代为我们完成<code>clean</code>，<code>generate</code>等操作，最后使用<code>peaceiris/actions-gh-pages@v3</code>组件帮我们<code>deploy</code>到<code>master</code>分支。当然，这个组件还有两种其他配置方法，可以在github上查询到更详细更灵活的用法。</p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>本地库配置完毕后，就在hexo文件夹的根目录下的git bash中执行</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">git add .<br>git commit -m &quot;备注信息……&quot;<br>git push origin fluid(源文件所在分支名，我这里是fluid分支)<br></code></pre></div></td></tr></table></figure><p>同步至github远程库中，github会自动识别<code>.github/workflows/CI.yml</code>里的YAML配置文件，然后建立Actions。正常情况下博客源文件push后，几分钟Actions建立(Build)完毕后，就会看到Github服务器将源文件部署到master分支上了。之后写博客也仅仅需要执行上述三行代码就能将<code>Hexo源文件</code>和<code>Hexo生成的静态页面</code>同时部署到github上了。</p>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>Hexo</tag>
      
      <tag>CI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Fluid一些不常用功能简单使用</title>
    <link href="/2021/01/26/Hexo-Fluid%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/01/26/Hexo-Fluid%E4%B8%80%E4%BA%9B%E4%B8%8D%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Hexo-Fluid本身集成了一些有趣的功能，但是使用比较少，本文旨在简述这些功能的简单用法，也避免之后遗忘等问题。</p><a id="more"></a><h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><p>​    Fluid主题内置了脚注语法，有时方便引用的一些写法，脚注一般写在文末更规范美观。</p><p>栗子：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">脚注，是可以附在文章页面的最底端的，对文本加以补充说明的注文[^1]。<br>[<span class="hljs-symbol">^1</span>]:<span class="hljs-link">参考资料-百度百科</span><br></code></pre></div></td></tr></table></figure><p>效果：</p><p>​    脚注，是可以附在文章页面的最底端的，对文本加以补充说明的注文<sup><a href="#fn_1" id="reffn_1">1</a></sup>。(尾注自动生成至文末)</p><h2 id="Tag标签"><a href="#Tag标签" class="headerlink" title="Tag标签"></a>Tag标签</h2><h3 id="便签"><a href="#便签" class="headerlink" title="便签"></a>便签</h3><p>​        两种方式使用Tag插件，在markdown中使用如下代码</p><p>栗子一：使用markdown特殊代码段，注意两个特殊代码需要单独成一行</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% note success %&#125;<br>文字 或者 <span class="hljs-code">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></div></td></tr></table></figure><p>栗子二：使用HTML形式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;note note-primary&quot;</span>&gt;</span>标签<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>示栗：</p><div class="note note-primary">            <p>primary</p>          </div><div class="note note-secondary">            <p>secondary</p>          </div><div class="note note-success">            <p>success</p>          </div><p class="note note-danger">danger</p><p class="note note-warning">warning</p><p class="note note-info">info</p><p class="note note-light">light</p><h3 id="行内标签"><a href="#行内标签" class="headerlink" title="行内标签"></a>行内标签</h3><p>栗子一：使用markdown语法，加标签那段话不能以@开头</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">这段话第十个字之后要&#123;% label primary @加标签 %&#125;啦！<br></code></pre></div></td></tr></table></figure><p>这段话第十个字之后要<span class="label label-primary">加标签</span>啦！     ←效果</p><p>栗子二：使用HTML形式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html">这段话第十个字之后要<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-warning&quot;</span>&gt;</span>加标签<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>啦！<br></code></pre></div></td></tr></table></figure><p>这段话第十个字之后要<span class="label label-warning">加标签</span>啦！   ←效果</p><h3 id="勾选框"><a href="#勾选框" class="headerlink" title="勾选框"></a>勾选框</h3><p>在markdown后面加上下述代码使用Checkbox</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></div></td></tr></table></figure><p>text：显示的文字</p><p>checked：默认是否勾选，默认false</p><p>incline：是否内联(内联元素不会独占一行)，默认false</p><p>示栗：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% cb 普通示例 %&#125;<br><br>&#123;% cb 默认选中, true %&#125;<br><br>&#123;% cb 内联示例, false, true %&#125; 后面文字不换行<br><br>&#123;% cb false %&#125; 也可以只传入一个参数，文字写在后边（这样不支持外联)<br></code></pre></div></td></tr></table></figure><div>            <input type="checkbox" disabled >普通示例          </div><div>            <input type="checkbox" disabled checked="checked">默认选中          </div><div><span>            <input type="checkbox" disabled >内联示例          </span><span><input type="checkbox" disabled >也可以只传入一个参数，文字写在后边（这样不支持外联) </span></div><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><p>可以在markdown中加入如下代码来使用Button：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% btn url, text, title %&#125;<br></code></pre></div></td></tr></table></figure><p>也可以使用HTML形式</p><figure class="highlight html"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;title&quot;</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>url：跳转链接</p><p>text：显示文字</p><p>title：鼠标悬停于button时显示的文字</p><a class="btn" href="https://github.com/novpath"  title="点击进入我的github主页" target="_blank">我是按钮</a>   <h3 id="组图"><a href="#组图" class="headerlink" title="组图"></a>组图</h3><p>该功能以实现多张图片按一定布局组合显示。</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% gi total n1-n2-... %&#125;<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>  ![](url)<br>&#123;% endgi %&#125;<br></code></pre></div></td></tr></table></figure><p>total：图片总数量，对应中间包含的图片 url 数量<br>n1-n2-…：每行的图片数量，可以省略，默认单行最多 3 张图，求和必须相等于 total，否则按默认样式</p><p>效果：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/img/avatar.png" alt="图片1"></div><div class="group-image-wrap"><img src="/img/avatar.png" alt="图片2"></div><div class="group-image-wrap"><img src="/img/avatar.png" alt="图片3"></div></div></div><h2 id="LaTeX-数学公式显示测试"><a href="#LaTeX-数学公式显示测试" class="headerlink" title="LaTeX 数学公式显示测试"></a>LaTeX 数学公式显示测试</h2><script type="math/tex; mode=display">\frac{1}{\Bigl(\sqrt{\phi \sqrt{5}}-\phi\Bigr) e^{\frac25 \pi}} \equiv 1+\frac{e^{-2\pi}} {1+\frac{e^{-4\pi}} {1+\frac{e^{-6\pi}} {1+\frac{e^{-8\pi}} {1+\cdots} } } }</script><h2 id="Mermaid组图显示测试"><a href="#Mermaid组图显示测试" class="headerlink" title="Mermaid组图显示测试"></a>Mermaid组图显示测试</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">&#123;% mermaid %&#125;<br>Mermaid语句<br>&#123;% endmermaid %&#125;<br>或者<br>​<span class="hljs-code">```mermaid</span><br><span class="hljs-code">代码块……</span><br></code></pre></div></td></tr></table></figure><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><pre><code class="mermaid" >graph LR;   A-->B;    B-->C;    C-->D;    D-->E;    </code></pre><h3 id="甘特图"><a href="#甘特图" class="headerlink" title="甘特图"></a>甘特图</h3><pre><code class=" mermaid">ganttdateFormat  YYYY-MM-DDtitle Adding GANTT diagram to mermaidsection A sectionCompleted task            :done,    des1, 2014-01-06,2014-01-08Active task               :active,  des2, 2014-01-09, 3dFuture task               :         des3, after des2, 5dFuture task2               :         des4, after des3, 5d</code></pre>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo搭建博客常见问题及解决</title>
    <link href="/2021/01/24/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/01/24/Hexo%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<hr><h4 id="1-Q：Hexo更换新主题无法成功安装，出错。"><a href="#1-Q：Hexo更换新主题无法成功安装，出错。" class="headerlink" title="1.Q：Hexo更换新主题无法成功安装，出错。"></a>1.<strong>Q</strong>：Hexo更换新主题无法成功安装，出错。</h4><p>   <strong>A</strong>：首先，确保新主题在hexo生成的站点文件的themes文件夹下。其次，确保站点配置文件<em>_config.yml</em>中的theme：之后的字段名字和你下载主题库的文件夹名字相同。</p><h4 id="2-Q：Hexo静态页面报错，丢失样式，并提示"><a href="#2-Q：Hexo静态页面报错，丢失样式，并提示" class="headerlink" title="2.Q：Hexo静态页面报错，丢失样式，并提示"></a>2.<strong>Q</strong>：Hexo静态页面报错，丢失样式，并提示"{% extends ‘_layout.swig‘ %} {% import ‘_macro/post.swig‘ as post_template %}" </h4><p>​    <strong>A</strong>：新版的hexo默认swig未安装，应该重新安装</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">npm i hexo-renderer-swig<br></code></pre></div></td></tr></table></figure><h4 id="3-Q：Hexo静态页面本地版式没问题，deploy到github上出现乱版。"><a href="#3-Q：Hexo静态页面本地版式没问题，deploy到github上出现乱版。" class="headerlink" title="3.Q：Hexo静态页面本地版式没问题，deploy到github上出现乱版。"></a>3.<strong>Q</strong>：Hexo静态页面本地版式没问题，deploy到github上出现乱版。</h4><p>​    <strong>A</strong>：尝试将hexo缓存区清空后重试</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo clean<br></code></pre></div></td></tr></table></figure><a id="more"></a><h4 id="4-Q：Hexo备份"><a href="#4-Q：Hexo备份" class="headerlink" title="4.Q：Hexo备份"></a>4.<strong>Q</strong>：Hexo备份</h4><p>​    <strong>A</strong>：hexo是在本地生成页面后deploy到Github page或者Gitee上的，所以push上去的文件不包括一些源文件，需要备份时可以在github新建一个branch hexo，然后将整个hexo push至github上托管即可。</p><h4 id="5-Q：Hexo菜单栏图标未启用（以next主题为例"><a href="#5-Q：Hexo菜单栏图标未启用（以next主题为例" class="headerlink" title="5.Q：Hexo菜单栏图标未启用（以next主题为例)"></a>5.<strong>Q</strong>：Hexo菜单栏图标未启用（以<strong>next</strong>主题为例)</h4><p>​    <strong>A</strong>：检查自己的站点是否运行在根目录下，运行在子目录下要删除下述代码中的’/‘。(注意，<strong>YAML</strong>语言冒号后面都要有空格，否则会出错；而且/后面也不能有空格，否则会报错，5.0之后的版本已经测试过确实如此)’||’后面表示启用home对应的图标，没有||也是不行的，同时注意<em>menu_icons:</em>菜单栏图标对应关系是否出错。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">menu:</span><br>  <span class="hljs-attr">home:</span> <span class="hljs-string">/||home</span><br></code></pre></div></td></tr></table></figure><h4 id="6-Q：每次撰写新文章时要配置tag、categories等信息很麻烦。"><a href="#6-Q：每次撰写新文章时要配置tag、categories等信息很麻烦。" class="headerlink" title="6.Q：每次撰写新文章时要配置tag、categories等信息很麻烦。"></a>6.<strong>Q</strong>：每次撰写新文章时要配置tag、categories等信息很麻烦。</h4><p>​    <strong>A</strong>：打开Hexo中生成的<strong>scaffold</strong>文档，修改里面三种模板文件draft、page、post的模板，这样以后用下述代码</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs git">hexo new post &quot;&lt;文章标题&gt;&quot;<br></code></pre></div></td></tr></table></figure><p>生成文章之后，会自动生成你配置好的md文件，以post为例，可以采用如下模板，模板上下的两条横杆不可以省略：<br><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<br><span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<br><span class="hljs-attr">top:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">cover:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">password:</span><br><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">mathjax:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">summary:</span><br><span class="hljs-attr">tags:</span><br><span class="hljs-attr">categories:</span><br><span class="hljs-meta">---</span><br></code></pre></div></td></tr></table></figure></p><h4 id="7-Q：出现Template-render-error-unknown-path-报错或者出现err-Error-Nunjucks-Error"><a href="#7-Q：出现Template-render-error-unknown-path-报错或者出现err-Error-Nunjucks-Error" class="headerlink" title="7.Q：出现Template render error: (unknown path)报错或者出现err:Error [Nunjucks Error]"></a>7.<strong>Q</strong>：出现Template render error: (unknown path)报错或者出现err:Error [Nunjucks Error]</h4><p>​    <strong>A</strong>：问题在于出现了Hexo无法识别的内容，比如问题6中出现的'{{'以及'}}'或者'{% %}'，如果它不在代码块中，且没被注释，就会报错。还有一种可能就是5中所提到的，YAML代码冒号后面空格未加，也有可能报错。第一种可能的解决办法就是，增加两行识别代码或者将其注释掉。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml">&#123;<span class="hljs-string">%</span> <span class="hljs-string">raw</span> <span class="hljs-string">%</span>&#125;<br><span class="hljs-string">识别报错部分</span><br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">endraw</span> <span class="hljs-string">%</span>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>代码</category>
      
      <category>博客相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>时间的流逝</title>
    <link href="/2021/01/23/%E6%97%B6%E9%97%B4%E7%9A%84%E6%B5%81%E9%80%9D/"/>
    <url>/2021/01/23/%E6%97%B6%E9%97%B4%E7%9A%84%E6%B5%81%E9%80%9D/</url>
    
    <content type="html"><![CDATA[<hr><p>​       虽然我们无时无刻不在经历着时间的流逝，但是习以为常的我们可能却很容易忽视这一点，时间就悄悄地从缝隙中一点一滴的溜走了。人们对时间感知的相对性就很强，有些潜心科研的人甚至会忘却周围、忘却时间。要想准确的感知时间，感知一天中我们花了多少时间在某些事情上，我们就需要去刻意的记录它，记录这一过程。</p><p>​       信息时代做到这一点越发容易了，但也仅仅是指我们刻意去记录时才是如此。各种app可以方便地记录你手头上所做的任何一件事——精确到分秒，只要你开始连续做这件事时按下app中自带的计时器即可。一开始记录者可能会惊叹自己想象中的自己和实际偏差之大，其实自己对时间的掌控是渺小的，但令人高兴的是这一切都能改变，俗话说“东隅已逝桑榆非晚”也是一种对前途的乐观与豁达。<br><a id="more"></a><br>​        当然，仔细一想，为何这近年来时间管理app越发火了，可以说是市场需求决定的，步入信息时代，人们反而感觉自己对时间的掌控越来越力不从心。所以一个有趣的现象就是我们更方便的能管理时间了，但其实这个优点是由于我们越来越不善于管理时间而衍生出来的优点。纵观现在的app也不难发现其中的猫腻，app首先肯定要能吸引潜在用户去使用，而且也尽量需要具备一定粘度。最常用的一种工业设计就是“流”设计，就像流水线一样一个接着一个，视频软件里的流设计让你不知不觉的划过很多其实你本来并不需要观看的视频，各种评论区的下拉菜单也让各位读者沉浸在信息爆炸中浑然不知时间的飞逝。如果说“流”设计是“软刀子”，那几乎所有app都具有的推送功能就是“硬刀子”，采用各种算法配适的推送信息最大可能性地去吸引你的注意力。</p><p>​        这些信息陷阱无处不在，似乎防不胜防，但破局之道也不是没有。二维的世界只能看到三维的阴影，同样的，我们只有从虚拟的“低维世界”脱身去现实的“高维世界”，才能不被信息茧房所束缚。每当信息接踵而来时，我们不应该应激的去滑动那无尽的滑动窗口，而是应该站在更高的维度，作为一个真实世界的自己，来审问自己——到底我的目的是什么？是否花了不必要的时间？自己还有什么需要去做的吗？保持清醒的自己，就是对虚拟世界信息垃圾陷阱的一次降维打击，效果往往能出乎人的意料。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>思考</category>
      
    </categories>
    
    
    <tags>
      
      <tag>思考</tag>
      
      <tag>杂谈</tag>
      
      <tag>方法论</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
